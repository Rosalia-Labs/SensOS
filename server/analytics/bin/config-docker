#!/usr/bin/env bash
# config-docker — write analytics/docker/.env from flags
# Requires: bash
set -euo pipefail

show_usage() {
  cat <<'USAGE'
Usage:
  config-docker --audio-dir PATH --db-data-path PATH [options]

Required:
  --audio-dir PATH            Host dir to mount at /audio_recordings
  --db-data-path PATH         Host dir for Postgres data (/var/lib/postgresql/data)

Optional:
  --postgres-db NAME          Database name (default: sensos)
  --postgres-user NAME        Database user (default: sensos)
  --postgres-password STR     Database password (default: sensos)
  --db-host NAME              DB hostname for clients (default: sensos-analytics-database)
  --db-port PORT              DB port (default: 5432)
  --env-file PATH             Output .env path (default: analytics/docker/.env)
  --mkdirs                    Create the directories if they don't exist
  -h, --help                  Show this help

Example:
  analytics/bin/config-docker \
    --audio-dir /srv/data/audio_recordings \
    --db-data-path /srv/data/postgres \
    --postgres-password supersecret \
    --mkdirs
USAGE
}

# Resolve default paths relative to this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
DEFAULT_ENV_FILE="$PROJECT_ROOT/docker/.env"

# Defaults (optional)
POSTGRES_DB="sensos"
POSTGRES_USER="sensos"
POSTGRES_PASSWORD="sensos"
DB_HOST="sensos-analytics-database"
DB_PORT="5432"
ENV_FILE="$DEFAULT_ENV_FILE"
MKDIRS=0

# Required (no defaults)
AUDIO_DIR=""
DB_DATA_PATH=""

# No args -> help
if (( $# == 0 )); then
  show_usage
  exit 1
fi

# Parse long options
while (( $# > 0 )); do
  case "$1" in
    --audio-dir)
      [[ $# -gt 1 ]] || { echo "Error: --audio-dir requires a value" >&2; exit 2; }
      AUDIO_DIR="$2"; shift 2 ;;
    --db-data-path)
      [[ $# -gt 1 ]] || { echo "Error: --db-data-path requires a value" >&2; exit 2; }
      DB_DATA_PATH="$2"; shift 2 ;;
    --postgres-db)
      [[ $# -gt 1 ]] || { echo "Error: --postgres-db requires a value" >&2; exit 2; }
      POSTGRES_DB="$2"; shift 2 ;;
    --postgres-user)
      [[ $# -gt 1 ]] || { echo "Error: --postgres-user requires a value" >&2; exit 2; }
      POSTGRES_USER="$2"; shift 2 ;;
    --postgres-password)
      [[ $# -gt 1 ]] || { echo "Error: --postgres-password requires a value" >&2; exit 2; }
      POSTGRES_PASSWORD="$2"; shift 2 ;;
    --db-host)
      [[ $# -gt 1 ]] || { echo "Error: --db-host requires a value" >&2; exit 2; }
      DB_HOST="$2"; shift 2 ;;
    --db-port)
      [[ $# -gt 1 ]] || { echo "Error: --db-port requires a value" >&2; exit 2; }
      DB_PORT="$2"; shift 2 ;;
    --env-file)
      [[ $# -gt 1 ]] || { echo "Error: --env-file requires a value" >&2; exit 2; }
      ENV_FILE="$2"; shift 2 ;;
    --mkdirs)
      MKDIRS=1; shift ;;
    -h|--help)
      show_usage; exit 0 ;;
    --)
      shift; break ;;
    -*)
      echo "Unknown option: $1" >&2
      show_usage
      exit 2 ;;
    *)
      echo "Unexpected argument: $1" >&2
      show_usage
      exit 2 ;;
  esac
done

# Validate required
[[ -n "$AUDIO_DIR" ]] || { echo "Error: --audio-dir is required." >&2; exit 2; }
[[ -n "$DB_DATA_PATH" ]] || { echo "Error: --db-data-path is required." >&2; exit 2; }

# Ensure dirs
ensure_dir() {
  local p="$1"
  if [[ -d "$p" ]]; then return 0; fi
  if (( MKDIRS )); then
    mkdir -p -- "$p"
  else
    echo "Error: directory does not exist: $p (use --mkdirs to create it)" >&2
    exit 3
  fi
}
ensure_dir "$AUDIO_DIR"
ensure_dir "$DB_DATA_PATH"

# Ensure env-file parent
mkdir -p -- "$(dirname "$ENV_FILE")"

# Write .env
cat > "$ENV_FILE" <<EOF
# Auto-generated by bin/config-docker

POSTGRES_DB=$POSTGRES_DB
POSTGRES_USER=$POSTGRES_USER
POSTGRES_PASSWORD=$POSTGRES_PASSWORD
DB_HOST=$DB_HOST
DB_PORT=$DB_PORT
DB_DATA_PATH=$DB_DATA_PATH
AUDIO_DIR=$AUDIO_DIR
EOF

echo "✓ .env written to: $ENV_FILE"
echo "Values:"
echo "  POSTGRES_DB=$POSTGRES_DB"
echo "  POSTGRES_USER=$POSTGRES_USER"
echo "  POSTGRES_PASSWORD=********"
echo "  DB_HOST=$DB_HOST"
echo "  DB_PORT=$DB_PORT"
echo "  DB_DATA_PATH=$DB_DATA_PATH"
echo "  AUDIO_DIR=$AUDIO_DIR"
