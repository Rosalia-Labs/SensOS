#!/usr/bin/env python3
import os
import sys
import stat
import argparse
import requests
import json
import subprocess

# Default Configuration
DEFAULT_SERVER = "localhost"
DEFAULT_PORT = "8000"
DEFAULT_NETWORK_NAME = "sensos"
DEFAULT_CONFIG_DIR = "/etc/wireguard"
DEFAULT_WG_PORT = "51820"


def parse_args():
    """Parse command-line arguments."""
    parser = argparse.ArgumentParser(
        description="Configure the Sensos WireGuard client."
    )
    parser.add_argument(
        "--server",
        default=DEFAULT_SERVER,
        help="Server hostname or IP (default: localhost)",
    )
    parser.add_argument(
        "--port",
        default=DEFAULT_PORT,
        help="Server port (default: 8000)",
    )
    parser.add_argument(
        "--network", default=DEFAULT_NETWORK_NAME, help="Network name (default: sensos)"
    )
    parser.add_argument(
        "--config-dir",
        default=DEFAULT_CONFIG_DIR,
        help="WireGuard config directory (default: /etc/wireguard)",
    )
    parser.add_argument(
        "--wg-port",
        default=DEFAULT_WG_PORT,
        help="WireGuard server port (default: 51820)",
    )
    parser.add_argument(
        "--force",
        action="store_true",
        help="Force overwrite of existing files and settings",
    )
    return parser.parse_args()


def run_command(cmd):
    """Runs a shell command and returns its output."""
    return subprocess.run(
        cmd, shell=True, check=True, capture_output=True, text=True
    ).stdout.strip()


def generate_wireguard_keys(config_dir, force):
    """Generate WireGuard key pair if not already present. Returns public key."""
    private_key_file = os.path.join(config_dir, "private.key")
    public_key_file = os.path.join(config_dir, "public.key")

    if os.path.exists(private_key_file) or os.path.exists(public_key_file):
        print("‚ö†Ô∏è WireGuard keys already exist.")
        if not force:
            print(
                "üö´ Aborting to prevent overwriting existing keys. Use --force to override."
            )
            sys.exit(1)

    print("üîë Generating new WireGuard key pair...")
    private_key = run_command("wg genkey")
    public_key = run_command(f"echo {private_key} | wg pubkey")

    os.makedirs(config_dir, exist_ok=True)

    # Write the private key securely
    with open(private_key_file, "w") as f:
        f.write(private_key)
    os.chmod(
        private_key_file, stat.S_IRUSR | stat.S_IWUSR
    )  # chmod 600 (owner read/write)

    # Write the public key (less sensitive)
    with open(public_key_file, "w") as f:
        f.write(public_key)

    print(f"  - Private Key stored in: {private_key_file} (permissions set to 600)")
    print(f"  - Public Key: {public_key}")

    return public_key


def compute_hostname(network_name, wg_ip):
    """Compute hostname as {network_name}-{3rd_octet}-{4th_octet}."""
    ip_parts = wg_ip.split(".")
    return f"{network_name}-{ip_parts[2]}-{ip_parts[3]}"


def register_client(server, port, network_name, wg_public_key):
    """Register the device with the WireGuard server and return its assigned IP."""
    server_url = f"http://{server}:{port}/register-device"
    print(f"üì° Registering device on network '{network_name}' with {server_url}...")

    response = requests.post(server_url, json={"network_name": network_name})

    print(f"Status Code: {response.status_code}")
    print(f"Response Headers: {response.headers}")
    print(f"Response Text: {response.text}")

    if response.status_code != 200:
        print(f"‚ùå Failed to register. Server response: {response.text}")
        sys.exit(1)

    data = response.json()
    wg_ip = data["wg_ip"]
    server_pubkey = data["public_key"]

    hostname = compute_hostname(network_name, wg_ip)

    # Register the WireGuard public key separately
    register_wireguard_key(server, port, wg_ip, wg_public_key)

    return wg_ip, hostname, server_pubkey


def register_wireguard_key(server, port, wg_ip, wg_public_key):
    """Registers the WireGuard public key for this device."""
    server_url = f"http://{server}:{port}/register-wireguard-key"
    print(f"üîë Registering WireGuard public key with {server_url}...")

    response = requests.post(
        server_url, json={"wg_ip": wg_ip, "wg_public_key": wg_public_key}
    )

    if response.status_code != 200:
        print(f"‚ùå Failed to register WireGuard key. Server response: {response.text}")
        sys.exit(1)

    print(f"‚úÖ WireGuard key registered for {wg_ip}.")


def change_hostname(new_hostname):
    """Change the system hostname to the computed value."""
    current_hostname = run_command("hostname")
    if current_hostname != new_hostname:
        print(f"üîÑ Changing hostname from {current_hostname} to {new_hostname}...")

        with open("/etc/hostname", "w") as f:
            f.write(new_hostname + "\n")

        with open("/etc/hosts", "r") as f:
            hosts = f.readlines()

        with open("/etc/hosts", "w") as f:
            for line in hosts:
                if "127.0.1.1" in line:
                    f.write(f"127.0.1.1 {new_hostname}\n")
                else:
                    f.write(line)

        print(
            f"‚úÖ Hostname changed manually to {new_hostname} (will apply after restart)"
        )
    else:
        print(f"‚úÖ Hostname is already set to {new_hostname}")


def write_wireguard_config(
    wg_ip, server_pubkey, config_dir, wg_port, network_name, force, server
):
    """Write the WireGuard configuration file with secure permissions."""

    private_key_file = os.path.join(config_dir, "private.key")
    wg_config_file = os.path.join(config_dir, f"{network_name}.conf")

    if os.path.exists(wg_config_file):
        print(f"‚ö†Ô∏è WireGuard config file {wg_config_file} already exists.")
        if not force:
            print(
                "üö´ Aborting to prevent overwriting existing configuration. Use --force to override."
            )
            sys.exit(1)

    with open(private_key_file, "r") as f:
        private_key = f.read().strip()

    # Correctly extract the first two octets
    ip_parts = wg_ip.split(".")
    if len(ip_parts) != 4:
        print(f"‚ùå Error: Invalid IP format received: {wg_ip}")
        sys.exit(1)

    base_ip = f"{ip_parts[0]}.{ip_parts[1]}"  # Extracts "10.155" from "10.155.1.23"
    allowed_ips = f"{base_ip}.0.0/16"  # Generates "10.155.0.0/16"

    config = f"""
[Interface]
PrivateKey = {private_key}
Address = {wg_ip}/32
DNS = 8.8.8.8

[Peer]
PublicKey = {server_pubkey}
Endpoint = {server}:{wg_port}  # Change this if needed
AllowedIPs = {allowed_ips}
PersistentKeepalive = 25
"""

    os.makedirs(config_dir, exist_ok=True)

    # Write the WireGuard configuration securely
    with open(wg_config_file, "w") as f:
        f.write(config)
    os.chmod(
        wg_config_file, stat.S_IRUSR | stat.S_IWUSR
    )  # chmod 600 (owner read/write only)

    print(
        f"‚úÖ WireGuard configuration written to {wg_config_file} (permissions set to 600)"
    )
    print(f"üîß Allowed IPs set to {allowed_ips}")


def main():
    """Main execution flow."""
    args = parse_args()

    print("üöÄ Starting device configuration...")

    wg_public_key = generate_wireguard_keys(args.config_dir, args.force)

    wg_ip, hostname, server_pubkey = register_client(
        args.server, args.port, args.network, wg_public_key
    )

    write_wireguard_config(
        wg_ip,
        server_pubkey,
        args.config_dir,
        args.wg_port,
        args.network,
        args.force,
        args.server,
    )

    change_hostname(hostname)

    print(
        "‚úÖ Configuration complete. Hostname has been updated, and WireGuard is set up."
    )


if __name__ == "__main__":
    main()
