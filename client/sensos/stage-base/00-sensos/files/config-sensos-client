#!/usr/bin/env python3
import os
import sys
import stat
import argparse
import requests
import datetime
import subprocess
import base64
import json

# Default Configuration
DEFAULT_SERVER = "localhost"
DEFAULT_PORT = "8000"
DEFAULT_NETWORK_NAME = "sensos"
DEFAULT_WG_DIR = "/etc/wireguard"
DEFAULT_KEEPALIVE = "0"

API_PASSWORD_FILE = os.path.expanduser("~/.sensos_api_password")
REGISTRY_PASSWORD_FILE = os.path.expanduser("~/.sensos_registry_password")


def parse_args():
    """Parse command-line arguments."""
    parser = argparse.ArgumentParser(
        description="Configure the Sensos WireGuard client."
    )
    parser.add_argument(
        "--server",
        default=DEFAULT_SERVER,
        help="API server hostname or IP (default: localhost)",
    )
    parser.add_argument(
        "--port",
        default=DEFAULT_PORT,
        help="Server port (default: 8000)",
    )
    parser.add_argument(
        "--network", default=DEFAULT_NETWORK_NAME, help="Network name (default: sensos)"
    )
    parser.add_argument(
        "--wg-config-dir",
        default=DEFAULT_WG_DIR,
        help="WireGuard config directory (default: /etc/wireguard)",
    )
    parser.add_argument(
        "--wg-keepalive",
        default=DEFAULT_KEEPALIVE,
        help="WireGuard persistent keepalive interval (default: 0 seconds)",
    )
    parser.add_argument(
        "--subnet",
        type=int,
        default=1,  # Default to starting at x.x.1.1
        help="Subnet offset for WireGuard IP assignment (default: 1, i.e., x.x.1.1)",
    )
    parser.add_argument(
        "--force",
        action="store_true",
        help="Force overwrite of existing files and settings",
    )
    parser.add_argument(
        "--enable-ssh-passwords",
        action="store_true",
        help="Enable SSH password authentication (default: disabled)",
    )
    return parser.parse_args()


def run_command(cmd):
    """Runs a shell command and returns its output."""
    return subprocess.run(
        cmd, shell=True, check=True, capture_output=True, text=True
    ).stdout.strip()


def enable_wireguard(netname: str):
    service_name = f"wg-quick@{netname}.service"
    run_command(f"sudo systemctl enable {service_name}")
    run_command(f"sudo systemctl start {service_name}")
    print(f"✅ WireGuard service {service_name} enabled and started.")


def enable_ssh(passwords: bool = False):
    """Enable SSH and configure password authentication based on the `passwords` flag."""
    sshd_config = "/etc/ssh/sshd_config"
    backup_config = "/etc/ssh/sshd_config.bak"

    # Backup before modifying
    run_command(f"sudo cp -a {sshd_config} {backup_config}")

    # Set password authentication based on flag
    password_setting = "yes" if passwords else "no"
    run_command(
        f"sudo sed -i 's/^#?PasswordAuthentication .*/PasswordAuthentication {password_setting}/' {sshd_config}"
    )

    print(f"✅ SSH passwords are {'enabled' if passwords else 'disabled'}.")

    # Ensure public key authentication is enabled
    run_command(
        f"sudo sed -i 's/^#?PubkeyAuthentication .*/PubkeyAuthentication yes/' {sshd_config}"
    )

    # Enable and start SSH service
    run_command("sudo systemctl enable ssh")
    run_command("sudo systemctl start ssh")

    print("✅ SSH service enabled and started.")
    print("🔄 A reboot is required for changes to fully take effect.")


def get_basic_auth(api_password):
    """Encode API password in Basic Auth format."""
    auth_str = f":{api_password}"  # Username is ignored, so empty username
    return base64.b64encode(auth_str.encode()).decode()


def validate_api_password(server, port, api_password):
    """Test the API password by sending a GET request to a /validate endpoint.
    Adjust the URL as needed if your API uses a different test endpoint.
    """
    url = f"http://{server}:{port}/"
    headers = {"Authorization": f"Basic {get_basic_auth(api_password)}"}
    try:
        response = requests.get(url, headers=headers, timeout=5)
        if response.status_code == 200:
            return True
        else:
            print(f"Server returned status code {response.status_code}.")
            return False
    except Exception as e:
        print(f"Error testing API password: {e}")
        return False


def get_api_password(server, port):
    """Retrieve or prompt for API password, testing it with the server.
    Allows up to 3 attempts.
    """
    tries = 3
    for attempt in range(tries):
        if os.path.exists(API_PASSWORD_FILE):
            with open(API_PASSWORD_FILE, "r") as f:
                stored_password = f.read().strip()
            print("Testing stored API password...")
            if validate_api_password(server, port, stored_password):
                print("✅ API password from file is valid.")
                return stored_password
            else:
                print("⚠️ Stored API password is invalid.")
        # Prompt user for a new password
        api_password = input("🔑 Enter API password: ").strip()
        if validate_api_password(server, port, api_password):
            with open(API_PASSWORD_FILE, "w") as f:
                f.write(api_password)
            os.chmod(API_PASSWORD_FILE, stat.S_IRUSR | stat.S_IWUSR)
            print(f"✅ API password saved securely in {API_PASSWORD_FILE}.")
            return api_password
        else:
            print("❌ API password is invalid, please try again.")
    print("🚫 Failed to provide a valid API password after 3 attempts.")
    sys.exit(1)


def generate_wireguard_keys(wg_config_dir, force):
    """Generate WireGuard key pair if not already present. Returns public key."""

    if not os.path.isdir(wg_config_dir):
        print(
            f"Error: Configuration directory '{wg_config_dir}' does not exist.",
            file=sys.stderr,
        )
        sys.exit(1)

    private_key_file = os.path.join(wg_config_dir, "private.key")
    public_key_file = os.path.join(wg_config_dir, "public.key")

    if os.path.exists(private_key_file) or os.path.exists(public_key_file):
        print("⚠️ WireGuard keys already exist.")
        if not force:
            print(
                "🚫 Aborting to prevent overwriting existing keys. Use --force to override."
            )
            sys.exit(1)

    print("🔑 Generating new WireGuard key pair...")
    private_key = run_command("wg genkey")
    public_key = run_command(f"echo {private_key} | wg pubkey")

    # Write the private key securely using sudo
    run_command(f"echo '{private_key}' | sudo tee {private_key_file} > /dev/null")
    run_command(f"sudo chmod 600 {private_key_file}")

    # Write the public key (less sensitive)
    run_command(f"echo '{public_key}' | sudo tee {public_key_file} > /dev/null")

    print(f"  - Private Key stored in: {private_key_file} (permissions set to 600)")
    print(f"  - Public Key: {public_key}")

    return public_key


def compute_hostname(network_name, wg_ip):
    """Compute hostname as {network_name}-{3rd_octet}-{4th_octet}."""
    ip_parts = wg_ip.split(".")
    return f"{network_name}-{ip_parts[2]}-{ip_parts[3]}"


def register_peer(server, port, network_name, wg_public_key, api_password, subnet):
    """Register the device with the WireGuard server and return its assigned IP and connection details."""
    server_url = f"http://{server}:{port}/register-peer"
    print(f"📡 Registering device on network '{network_name}' with {server_url}...")

    headers = {"Authorization": f"Basic {get_basic_auth(api_password)}"}
    response = requests.post(
        server_url,
        json={"network_name": network_name, "subnet_offset": subnet},
        headers=headers,
    )

    print(f"Status Code: {response.status_code}")
    print(f"Response Headers: {response.headers}")
    print(f"Response Text: {response.text}")

    if response.status_code != 200:
        print(f"❌ Failed to register. Server response: {response.text}")
        sys.exit(1)

    data = response.json()
    wg_ip = data["wg_ip"]
    server_pubkey = data["wg_public_key"]
    wg_public_ip = data["wg_public_ip"]
    wg_port = data["wg_port"]

    hostname = compute_hostname(network_name, wg_ip)

    # Register the WireGuard public key separately
    register_wireguard_key(server, port, wg_ip, wg_public_key, api_password)

    return wg_ip, hostname, server_pubkey, wg_public_ip, wg_port


def register_wireguard_key(server, port, wg_ip, wg_public_key, api_password):
    """Registers the WireGuard public key for this device."""
    server_url = f"http://{server}:{port}/register-wireguard-key"
    print(f"🔑 Registering WireGuard public key with {server_url}...")

    headers = {"Authorization": f"Basic {get_basic_auth(api_password)}"}
    response = requests.post(
        server_url,
        json={"wg_ip": wg_ip, "wg_public_key": wg_public_key},
        headers=headers,
    )

    if response.status_code != 200:
        print(f"❌ Failed to register WireGuard key. Server response: {response.text}")
        sys.exit(1)

    print(f"✅ WireGuard key registered for {wg_ip}.")


def change_hostname(new_hostname):
    """Change the system hostname to the computed value."""
    current_hostname = run_command("hostname")
    if current_hostname != new_hostname:
        print(f"🔄 Changing hostname from {current_hostname} to {new_hostname}...")

        run_command(f"echo '{new_hostname}' | sudo tee /etc/hostname > /dev/null")

        run_command("sudo cp /etc/hosts /etc/hosts.bak")
        hosts = run_command("cat /etc/hosts").splitlines()

        updated_hosts = []
        for line in hosts:
            if "127.0.1.1" in line:
                updated_hosts.append(f"127.0.1.1 {new_hostname}")
            else:
                updated_hosts.append(line)

        run_command(
            f"echo '{chr(10).join(updated_hosts)}' | sudo tee /etc/hosts > /dev/null"
        )

        print(
            f"✅ Hostname changed manually to {new_hostname} (will apply after restart)"
        )
    else:
        print(f"✅ Hostname is already set to {new_hostname}")


def write_wireguard_config(
    wg_ip,
    server_pubkey,
    wg_config_dir,
    wg_public_ip,
    wg_port,
    network_name,
    force,
    wg_keepalive,
):
    """Write the WireGuard configuration file with secure permissions."""

    private_key_file = os.path.join(wg_config_dir, "private.key")
    wg_config_file = os.path.join(wg_config_dir, f"{network_name}.conf")

    if os.path.exists(wg_config_file):
        print(f"⚠️ WireGuard config file {wg_config_file} already exists.")
        if not force:
            print(
                "🚫 Aborting to prevent overwriting existing configuration. Use --force to override."
            )
            sys.exit(1)

    private_key = run_command(f"sudo cat {private_key_file}")

    # Correctly extract the first two octets for AllowedIPs
    ip_parts = wg_ip.split(".")
    if len(ip_parts) != 4:
        print(f"❌ Error: Invalid IP format received: {wg_ip}")
        sys.exit(1)

    base_ip = f"{ip_parts[0]}.{ip_parts[1]}"
    allowed_ips = f"{base_ip}.0.0/16"

    config = f"""
[Interface]
PrivateKey = {private_key}
Address = {wg_ip}/32

[Peer]
PublicKey = {server_pubkey}
Endpoint = {wg_public_ip}:{wg_port} 
AllowedIPs = {allowed_ips}
PersistentKeepalive = {wg_keepalive}
"""

    # Write the WireGuard configuration securely
    run_command(f"echo '{config}' | sudo tee {wg_config_file} > /dev/null")
    run_command(f"sudo chmod 600 {wg_config_file}")

    print(
        f"✅ WireGuard configuration written to {wg_config_file} (permissions set to 600)"
    )
    print(f"🔧 Allowed IPs set to {allowed_ips}")


def generate_ssh_keys(force):
    """Generate an SSH key pair if not already present."""
    ssh_dir = os.path.expanduser("~/.ssh")  # Store keys in the home directory
    os.makedirs(ssh_dir, exist_ok=True)  # Create ~/.ssh if it doesn't exist

    private_key_file = os.path.join(ssh_dir, "id_ed25519")
    public_key_file = f"{private_key_file}.pub"

    if os.path.exists(private_key_file) and os.path.exists(public_key_file):
        print("⚠️ SSH keys already exist.")
        if not force:
            print(
                "🚫 Aborting to prevent overwriting existing keys. Use --force to override."
            )
            sys.exit(1)

    print("🔑 Generating new SSH key pair...")
    run_command(f"ssh-keygen -t ed25519 -f {private_key_file} -q -N ''")

    if not os.path.exists(public_key_file):
        print(
            f"❌ Error: Failed to generate SSH public key at {public_key_file}",
            file=sys.stderr,
        )
        sys.exit(1)

    # Secure private key permissions
    os.chmod(private_key_file, 0o600)

    print(f"✅ SSH key generated at {private_key_file} and {public_key_file}.")


def extract_ssh_key_params(public_key_file):
    """Extract SSH key type, size, fingerprint, comment, and expiration date, handling missing files."""

    if not os.path.exists(public_key_file):
        print(
            f"❌ Error: SSH public key file '{public_key_file}' not found.",
            file=sys.stderr,
        )
        return None, None, None, None, None

    try:
        # Read the public key
        with open(public_key_file, "r") as f:
            key_parts = f.read().strip().split()

        if len(key_parts) < 2:
            print(
                f"❌ Error: Invalid SSH key format in '{public_key_file}'.",
                file=sys.stderr,
            )
            return None, None, None, None, None

        key_type = key_parts[0]  # e.g., 'ssh-ed25519', 'ssh-rsa', etc.
        key_comment = key_parts[-1] if len(key_parts) > 2 else None

        # Get the fingerprint and key size
        key_info = run_command(f"ssh-keygen -lf {public_key_file}")
        if not key_info:
            print(
                f"❌ Error: Failed to extract key details from '{public_key_file}'.",
                file=sys.stderr,
            )
            return key_type, None, key_comment, None, None

        key_info_parts = key_info.split()
        if len(key_info_parts) < 2:
            return key_type, None, key_comment, None, None

        fingerprint = key_info_parts[1]

        # Ensure key_size is an integer
        try:
            key_size = int(key_info_parts[0])  # Convert from string to integer
        except ValueError:
            print(
                f"⚠️ Warning: Failed to parse key size '{key_info_parts[0]}'. Defaulting to None."
            )
            key_size = None

        # Extract expiration date if present in comment
        expires_at = None
        if key_comment:
            try:
                # Example: "user@host expires:2026-01-01"
                if "expires:" in key_comment:
                    expires_str = key_comment.split("expires:")[-1].strip()
                    expires_at = datetime.datetime.strptime(
                        expires_str, "%Y-%m-%d"
                    ).isoformat()
            except ValueError:
                print(
                    f"⚠️ Warning: Could not parse expiration date from comment '{key_comment}'."
                )
                expires_at = None

        return key_type, key_size, key_comment, fingerprint, expires_at

    except Exception as e:
        print(
            f"❌ Exception while processing '{public_key_file}': {e}", file=sys.stderr
        )
        return None, None, None, None, None


def exchange_ssh_keys(server, port, wg_ip, api_password):
    """Registers an SSH public key for this device using its WireGuard IP."""

    ssh_dir = os.path.expanduser("~/.ssh")
    public_key_file = os.path.join(ssh_dir, "id_ed25519.pub")
    authorized_keys_file = os.path.join(ssh_dir, "authorized_keys")

    if not os.path.exists(public_key_file):
        print(
            f"❌ Error: SSH public key file '{public_key_file}' not found.",
            file=sys.stderr,
        )
        sys.exit(1)

    # Extract SSH key details
    username = os.getenv("USER") or run_command("whoami")
    uid = os.getuid()
    key_type, key_size, key_comment, fingerprint, expires_at = extract_ssh_key_params(
        public_key_file
    )

    if not key_type or not fingerprint:
        print(
            f"❌ Failed to extract SSH key details from {public_key_file}",
            file=sys.stderr,
        )
        sys.exit(1)

    # Prepare the payload ensuring correct types
    payload = {
        "wg_ip": wg_ip,
        "username": username,
        "uid": uid,
        "ssh_public_key": open(public_key_file).read().strip(),
        "key_type": key_type,
        "key_size": key_size if key_size else None,
        "key_comment": key_comment,
        "fingerprint": fingerprint,
        "expires_at": (expires_at if expires_at else None),
    }

    server_url = f"http://{server}:{port}/exchange-ssh-keys"
    print(f"🔑 Registering SSH public key with {server_url}...")

    headers = {"Authorization": f"Basic {get_basic_auth(api_password)}"}
    response = requests.post(server_url, json=payload, headers=headers)

    if response.status_code != 200:
        print(f"❌ Failed to register SSH key. Server response: {response.text}")
        sys.exit(1)

    print(f"✅ SSH key registered successfully for peer with WireGuard IP {wg_ip}.")

    # Append the returned SSH public key to authorized_keys
    server_public_key = response.json().get("ssh_public_key")

    if not server_public_key:
        print(f"❌ No SSH public key returned from server.", file=sys.stderr)
        sys.exit(1)

    with open(authorized_keys_file, "a") as auth_keys:
        auth_keys.write(server_public_key + "\n")

    print(f"✅ Server public key added to {authorized_keys_file}.")

    print(f"✅ SSH key registered successfully for peer with WireGuard IP {wg_ip}.")


def read_file(filepath):
    """Reads a file and returns its contents as a string, or None if an error occurs."""
    try:
        with open(filepath, "r") as f:
            return f.read().strip()
    except Exception as e:
        print(f"Error reading file {filepath}: {e}")
        return None


def sudo_read_file(filepath):
    """Helper to read a file using sudo (for WireGuard files not world-readable)."""
    try:
        content = run_command(f"sudo cat {filepath}")
        return content.strip()
    except Exception as e:
        print(f"Error reading {filepath} with sudo: {e}")
        return None


def parse_local_config(config_file):
    """
    Simple parser for a WireGuard config file using sudo.
    Returns a dict with keys:
      - wg_ip: from the [Interface] Address line (e.g., "10.0.0.5" from "Address = 10.0.0.5/32")
      - server_pubkey: from the [Peer] PublicKey line
    """
    config = {}
    content = sudo_read_file(config_file)
    if not content:
        return config

    current_section = None
    for line in content.splitlines():
        line = line.strip()
        if line.startswith("[") and line.endswith("]"):
            current_section = line[1:-1].strip()
        elif "=" in line and current_section:
            key, value = [x.strip() for x in line.split("=", 1)]
            if current_section.lower() == "interface" and key.lower() == "address":
                # Expecting "Address = 10.0.0.5/32"
                config["wg_ip"] = value.split("/")[0]
            elif current_section.lower() == "peer" and key.lower() == "publickey":
                config["server_pubkey"] = value
    return config


def configure_wireguard(args, api_password):
    """
    Check whether the local WireGuard configuration is valid by parsing the
    local config file and comparing key values with those from /get-peer-info.
    If missing or mismatched, or if the user chooses to reconfigure (unless --force),
    perform full WireGuard reconfiguration.
    """
    config_file = os.path.join(args.wg_config_dir, f"{args.network}.conf")
    reconfigure_wg = True

    if os.path.exists(config_file):
        print(f"Found WireGuard config at {config_file}.")
        local_config = parse_local_config(config_file)
        if "wg_ip" in local_config:
            local_wg_ip = local_config["wg_ip"]
            print(f"Local WireGuard IP: {local_wg_ip}. Querying /get-peer-info...")
            url = f"http://{args.server}:{args.port}/get-peer-info?ip_address={local_wg_ip}"
            headers = {"Authorization": f"Basic {get_basic_auth(api_password)}"}
            try:
                resp = requests.get(url, headers=headers, timeout=5)
                if resp.status_code == 200:
                    peer_info = resp.json()
                    if peer_info.get("exists"):
                        local_server_pubkey = local_config.get("server_pubkey")
                        local_peer_pubkey = read_file(
                            os.path.join(args.wg_config_dir, "public.key")
                        )
                        if local_server_pubkey == peer_info.get(
                            "network_wg_public_key"
                        ) and local_peer_pubkey == peer_info.get("peer_wg_public_key"):
                            print("Local WireGuard configuration matches API records.")
                            if not args.force:
                                choice = (
                                    input("Reconfigure WireGuard? (y/N): ")
                                    .strip()
                                    .lower()
                                )
                                reconfigure_wg = choice == "y"
                            else:
                                reconfigure_wg = True
                        else:
                            print(
                                "Mismatch in WireGuard keys detected. Reconfiguration required."
                            )
                    else:
                        print(
                            "Peer not registered in API. Full WireGuard configuration needed."
                        )
                else:
                    print(
                        f"/get-peer-info returned {resp.status_code}; proceeding with reconfiguration."
                    )
            except Exception as e:
                print("Error accessing /get-peer-info:", e)
        else:
            print("Local config does not contain a valid WireGuard IP.")
    else:
        print("No local WireGuard configuration file found.")

    if reconfigure_wg:
        print("Reconfiguring WireGuard...")
        wg_public_key = generate_wireguard_keys(args.wg_config_dir, args.force)
        wg_ip, hostname, server_pubkey, wg_public_ip, wg_port = register_peer(
            args.server,
            args.port,
            args.network,
            wg_public_key,
            api_password,
            args.subnet,
        )
        write_wireguard_config(
            wg_ip,
            server_pubkey,
            args.wg_config_dir,
            wg_public_ip,
            wg_port,
            args.network,
            args.force,
            args.wg_keepalive,
        )
        change_hostname(hostname)
    else:
        print("Keeping existing WireGuard configuration.")


def configure_ssh(args, api_password):
    """
    Check if SSH keys exist and whether the registered SSH public key (via /get-peer-info)
    matches the local SSH public key. If missing or mismatched, or if the user chooses
    to reconfigure (unless --force), generate new SSH keys and exchange them with the server.
    """
    ssh_private = os.path.expanduser("~/.ssh/id_ed25519")
    ssh_public = os.path.expanduser("~/.ssh/id_ed25519.pub")
    reconfigure_ssh = True

    if os.path.exists(ssh_private) and os.path.exists(ssh_public):
        local_ssh_pubkey = read_file(ssh_public)
        # Attempt to read the WireGuard config using sudo
        config_file = os.path.join(args.wg_config_dir, f"{args.network}.conf")
        wg_config_content = sudo_read_file(config_file)
        if wg_config_content:
            local_config = parse_local_config(config_file)
            if "wg_ip" in local_config:
                local_wg_ip = local_config["wg_ip"]
                print(
                    f"Querying /get-peer-info for SSH keys using WG IP {local_wg_ip}..."
                )
                url = f"http://{args.server}:{args.port}/get-peer-info?ip_address={local_wg_ip}"
                headers = {"Authorization": f"Basic {get_basic_auth(api_password)}"}
                try:
                    resp = requests.get(url, headers=headers, timeout=5)
                    if resp.status_code == 200:
                        peer_info = resp.json()
                        if peer_info.get("ssh_public_key") == local_ssh_pubkey:
                            print("SSH key configuration matches API records.")
                            if not args.force:
                                choice = (
                                    input("Reconfigure SSH keys? (y/N): ")
                                    .strip()
                                    .lower()
                                )
                                reconfigure_ssh = choice == "y"
                            else:
                                reconfigure_ssh = True
                        else:
                            print(
                                "Local SSH key does not match API. Reconfiguration required."
                            )
                    else:
                        print(
                            f"/get-peer-info returned {resp.status_code} for SSH; reconfiguring SSH."
                        )
                except Exception as e:
                    print("Error accessing /get-peer-info for SSH:", e)
            else:
                print("No WG IP found in local config; cannot verify SSH keys.")
        else:
            print(
                "No local WireGuard config available (cannot read with sudo); skipping SSH key exchange."
            )
    else:
        print("SSH keys not found; new keys will be generated.")

    if reconfigure_ssh:
        print("Reconfiguring SSH keys...")
        generate_ssh_keys(args.force)
        # Attempt SSH key exchange using the WG IP from the config (read with sudo)
        config_file = os.path.join(args.wg_config_dir, f"{args.network}.conf")
        wg_config_content = sudo_read_file(config_file)
        if wg_config_content:
            local_config = parse_local_config(config_file)
            if "wg_ip" in local_config:
                wg_ip = local_config["wg_ip"]
                exchange_ssh_keys(args.server, args.port, wg_ip, api_password)
            else:
                print("No WG IP available in config; cannot exchange SSH keys.")
        else:
            print("No local WG config available; skipping SSH key exchange.")
    else:
        print("Keeping existing SSH key configuration.")


def validate_registry_password(registry_info, registry_password):
    """
    Test the registry password by sending a GET request to the Docker Registry v2 endpoint.
    The registry_info dict must contain the keys 'registry_ip', 'registry_port', and 'registry_user'.
    """
    url = f"http://{registry_info['registry_ip']}:{registry_info['registry_port']}/v2/"
    try:
        response = requests.get(
            url, auth=(registry_info["registry_user"], registry_password), timeout=5
        )
        if response.status_code == 200:
            return True
        else:
            print(f"Registry returned status code {response.status_code}.")
            return False
    except Exception as e:
        print(f"Error testing registry password: {e}")
        return False


def get_registry_info_from_api(server, port, api_password):
    """
    Retrieve Sensos registry connection details from the API (which reads them from the database).
    """
    url = f"http://{server}:{port}/get-registry-info"
    headers = {"Authorization": f"Basic {get_basic_auth(api_password)}"}
    try:
        response = requests.get(url, headers=headers, timeout=5)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"Error retrieving registry info: Status code {response.status_code}")
            sys.exit(1)
    except Exception as e:
        print(f"Error retrieving registry info: {e}")
        sys.exit(1)


def save_registry_config(registry_info, registry_password):
    """
    Save the Sensos registry configuration to a local JSON file with secure permissions.
    The configuration is stored in ~/.sensos_registry_config.json.
    """
    config = {
        "registry_ip": registry_info["registry_ip"],
        "registry_port": registry_info["registry_port"],
        "registry_user": registry_info["registry_user"],
        "registry_password": registry_password,
    }
    config_file = os.path.expanduser("~/.sensos_registry_config.json")
    with open(config_file, "w") as f:
        json.dump(config, f, indent=2)
    os.chmod(config_file, stat.S_IRUSR | stat.S_IWUSR)
    print(f"✅ Registry configuration saved to {config_file}.")


def get_registry_password_from_info(registry_info):
    """
    Retrieve or prompt for the registry password using the provided registry_info dict,
    validate it by testing the connection, save it locally, and return the password.
    Allows up to 3 attempts.
    """
    tries = 3
    for attempt in range(tries):
        if os.path.exists(REGISTRY_PASSWORD_FILE):
            with open(REGISTRY_PASSWORD_FILE, "r") as f:
                stored_password = f.read().strip()
            print("Testing stored registry password...")
            if validate_registry_password(registry_info, stored_password):
                print("✅ Registry password from file is valid.")
                return stored_password
            else:
                print("⚠️ Stored registry password is invalid.")
        # Prompt user for a new registry password
        registry_password = input("🔑 Enter registry password: ").strip()
        if validate_registry_password(registry_info, registry_password):
            save_registry_config(registry_info, registry_password)
            print(f"✅ Registry password saved securely in {REGISTRY_PASSWORD_FILE}.")
            return registry_password
        else:
            print("❌ Registry password is invalid, please try again.")
    print("🚫 Failed to provide a valid registry password after 3 attempts.")
    sys.exit(1)


def get_all_passwords(args):
    """
    Prompt for and validate the API password, then retrieve registry info from the API,
    and finally prompt for and validate the registry password.
    Returns a dict with:
      - api_password
      - registry_info: dict with keys "registry_ip", "registry_port", "registry_user"
      - registry_password
    """
    # Get and validate the API password
    api_password = get_api_password(args.server, args.port)

    # Retrieve registry info from the API
    registry_info = get_registry_info_from_api(args.server, args.port, api_password)
    required_keys = ["registry_ip", "registry_port", "registry_user"]
    if not all(key in registry_info for key in required_keys):
        print("❌ Registry information is incomplete from API. Aborting.")
        sys.exit(1)

    print(
        f"Registry info: IP={registry_info['registry_ip']}, Port={registry_info['registry_port']}, User={registry_info['registry_user']}"
    )

    # Retrieve and validate the registry password using the registry_info dict
    registry_password = get_registry_password_from_info(registry_info)

    # Now registry information and password are stored for future use.
    print("Registry configuration:")
    print(f"  IP: {registry_info['registry_ip']}")
    print(f"  Port: {registry_info['registry_port']}")
    print(f"  User: {registry_info['registry_user']}")

    return {
        "api_password": api_password,
        "registry_info": registry_info,
        "registry_password": registry_password,
    }


def main():
    args = parse_args()
    print("🚀 Starting device configuration...")

    # Get both API and registry passwords up front, storing registry info for later use.
    creds = get_all_passwords(args)
    api_password = creds["api_password"]

    # Proceed with the rest of your configuration flows.
    configure_wireguard(args, api_password)
    configure_ssh(args, api_password)

    print("Starting WireGuard and SSH services...")
    try:
        enable_wireguard(args.network)
        enable_ssh(passwords=args.enable_ssh_passwords)
        print("✅ Services started successfully.")
    except Exception as e:
        print("❌ Error starting services:", e)

    print("✅ Configuration complete. Reboot now and check connectivity.")


if __name__ == "__main__":
    main()
