#!/bin/bash
# SPDX-License-Identifier: MIT
# Copyright (c) 2025 Rosalia Labs LLC

set -euo pipefail

script_name=$(basename "$0")

source /sensos/lib/load-defaults.sh
source /sensos/lib/parse-switches.sh

declare -A default_vars
load_defaults "$script_name" default_vars

get_default() {
    local varname="$1"
    local fallback="$2"
    echo "${default_vars[$varname]:-$fallback}"
}

# ---- Switches ---------------------------------------------------------------
register_option --boot-uart           boot_uart           "Set BOOT_UART (1|0)"                   "$(get_default boot_uart 1)"
register_option --power-off-on-halt   power_off_on_halt   "Set POWER_OFF_ON_HALT (1|0)"          "$(get_default power_off_on_halt 1)"
register_option --psu-max-current     psu_max_current     "Set PSU_MAX_CURRENT (mA)"             "$(get_default psu_max_current 5000)"
register_option --revert              revert              "Remove the above keys from EEPROM config (revert to defaults/base)" "$(get_default revert false)"

parse_switches "$script_name" "$@"
# ---------------------------------------------------------------------------

log() { echo "[INFO] $*"; }
err() { echo "[ERROR] $*" >&2; exit 1; }

BOOTCONF="/tmp/bootconf.txt"
TMPFILE="/tmp/bootconf.work.$$"

command -v rpi-eeprom-config >/dev/null || err "rpi-eeprom-config not found (sudo apt install rpi-eeprom)";

fetch_current_config() {
    if ! sudo rpi-eeprom-config > "$BOOTCONF" 2>/dev/null; then
        err "Could not read current EEPROM config"
    fi
}

upsert_key() {
    local key="$1"
    local val="$2"

    if grep -Eq "^[[:space:]]*${key}=" "$BOOTCONF"; then
        # replace existing line
        sed -i -E "s|^[[:space:]]*(${key}=).*|\1${val}|" "$BOOTCONF"
    else
        # append after [all] if present, else at end
        if grep -qE "^\\[all\\]" "$BOOTCONF"; then
            awk -v k="$key" -v v="$val" '
                BEGIN { inserted=0 }
                {
                  print
                  if (!inserted && $0 ~ /^\[all\]$/) {
                      print k"="v
                      inserted=1
                  }
                }
                END {
                  if (!inserted) {
                      # If somehow we never saw [all], still ensure key is present
                      print k"="v
                  }
                }
            ' "$BOOTCONF" > "$TMPFILE" && mv "$TMPFILE" "$BOOTCONF"
        else
            echo "${key}=${val}" >> "$BOOTCONF"
        fi
    fi
}

delete_key() {
    local key="$1"
    sed -i -E "/^[[:space:]]*${key}=.*/d" "$BOOTCONF"
}

KEYS=( "BOOT_UART" "POWER_OFF_ON_HALT" "PSU_MAX_CURRENT" )

fetch_current_config

if [[ "${revert}" == "true" ]]; then
    log "Reverting: removing managed keys from EEPROM config: ${KEYS[*]}"
    for k in "${KEYS[@]}"; do
        delete_key "$k"
    done

    log "Applying reverted EEPROM configuration..."
    sudo rpi-eeprom-config --apply "$BOOTCONF" || err "Failed to apply reverted config"

    log "Revert staged. Reboot required for changes to take effect and be visible."
    exit 0
fi

log "Updating EEPROM keys (preserving all other settings)..."
upsert_key "BOOT_UART"           "${boot_uart}"
upsert_key "POWER_OFF_ON_HALT"   "${power_off_on_halt}"
upsert_key "PSU_MAX_CURRENT"     "${psu_max_current}"

log "Applying EEPROM configuration..."
sudo rpi-eeprom-config --apply "$BOOTCONF" || err "Failed to apply EEPROM config"

log "EEPROM update staged. Reboot to activate; values may not be visible until after reboot."
