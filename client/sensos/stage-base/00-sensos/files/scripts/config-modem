#!/bin/bash
# SPDX-License-Identifier: MIT
# Copyright (c) 2025 Rosalia Labs

# config-modem (minimal)
# - Create/update a NetworkManager GSM profile for the provider
# - Autoconnect behavior via CONNECTIVITY_MODE in /sensos/etc/network.conf
# - Optional tc bandwidth caps (policy-driven; CLI can override)
# - For 1NCE only: persist WireGuard MTU=1120 into /etc/wireguard/${NETWORK_NAME}.conf and reload it

set -euo pipefail

script_name=$(basename "$0")
network_conf="/sensos/etc/network.conf"

# ----------------------- enforce user -----------------------
if [[ "$(id -un)" != "sensos-admin" ]]; then
  echo "ERROR: this script must be run as sensos-admin." >&2
  exit 1
fi

# ----------------------- usage -----------------------
print_usage() {
  cat <<EOF
Usage: $script_name [options]

Options:
  --service [value]          Cellular provider (e.g. 1nce, Soracom)
  --device  [value]          NetworkManager control port (e.g. cdc-wdm0 or ttyUSB2) (default: cdc-wdm0)
  --start   [true|false]     Bring modem online after config (default: false)
  --limit-up-kbit [value]    Egress cap in kbit (optional; overrides policy)
  --limit-down-kbit [value]  Ingress cap in kbit (optional; overrides policy)
  -h, --help                 Show this help and exit
EOF
}

for arg in "$@"; do
  if [[ "$arg" == "--help" || "$arg" == "-h" ]]; then
    print_usage
    exit 0
  fi
done

# ----------------------- deps -----------------------
if ! command -v nmcli >/dev/null 2>&1; then
  echo "ERROR: nmcli not found. Install NetworkManager." >&2
  exit 1
fi

# ----------------------- helpers -----------------------
source /sensos/lib/load-defaults.sh
source /sensos/lib/parse-switches.sh

declare -A default_vars
load_defaults "$script_name" default_vars

get_default() {
  local varname="$1"
  local fallback="${2-}"
  echo "${default_vars[$varname]:-$fallback}"
}

# ----------------------- options -----------------------
register_option --service service "Cellular provider (e.g. 1nce, Soracom)" "$(get_default service)"
register_option --device device "NetworkManager device/control port (e.g. cdc-wdm0 or ttyUSB2)" "$(get_default device cdc-wdm0)"
register_option --start start_now "Bring modem online after config" "$(get_default start_now false)"
register_option --limit-up-kbit   limit_up_kbit   "Egress cap in kbit (optional)"   "$(get_default limit_up_kbit "")"
register_option --limit-down-kbit limit_down_kbit "Ingress cap in kbit (optional)" "$(get_default limit_down_kbit "")"

set +u
parse_switches "$script_name" "$@"
set -u

if [[ -z "${service:-}" ]]; then
  echo "ERROR: --service must be specified." >&2
  exit 1
fi

# ----------------------- read config -----------------------
if [[ ! -f "$network_conf" ]]; then
  echo "ERROR: Required config $network_conf is missing." >&2
  exit 1
fi

# shellcheck disable=SC1090
source "$network_conf"

CONNECTIVITY_MODE="${CONNECTIVITY_MODE:-manual}"
BANDWIDTH_POLICY="${BANDWIDTH_POLICY:-open}"

# Derive & sanitize the WireGuard iface name from NETWORK_NAME (bash-only)
WG_IFACE="${NETWORK_NAME-}"
# remove any Windows CRs
WG_IFACE="${WG_IFACE//$'\r'/}"
# trim leading whitespace
WG_IFACE="${WG_IFACE#"${WG_IFACE%%[![:space:]]*}"}"
# trim trailing whitespace
WG_IFACE="${WG_IFACE%"${WG_IFACE##*[![:space:]]}"}"

WG_CONF="/etc/wireguard/${WG_IFACE}.conf"

# ----------------------- provider → APN -----------------------
case "$service" in
  1nce|1NCE)       apn="iot.1nce.net" ;;
  Soracom|soracom) apn="soracom.io" ;;
  *)
    echo "ERROR: Unsupported service '$service'." >&2
    exit 1
    ;;
esac

nm_con_name="sensos-$service"

# If a data iface like wwan0 was passed, nudge to control port
if [[ "${device}" == wwan* ]]; then
  echo "NOTE: '$device' looks like a data interface. Using control port 'cdc-wdm0' instead."
  device="cdc-wdm0"
fi

# Data iface used for tc/vnstat when a control port is used
data_iface="$device"
if [[ "$device" == cdc-wdm* || "$device" == ttyUSB* ]]; then
  data_iface="wwan0"
fi

# ----------------------- NetworkManager profile -----------------------
if nmcli -t -f NAME con show | grep -qx "$nm_con_name"; then
  echo "Updating connection '$nm_con_name' for device '$device'..."
  sudo nmcli con mod "$nm_con_name" gsm.apn "$apn" || true
  sudo nmcli con mod "$nm_con_name" connection.id "$nm_con_name" || true
  sudo nmcli con mod "$nm_con_name" connection.interface-name "$device" || true
else
  echo "Creating connection '$nm_con_name' on device '$device'..."
  sudo nmcli con add type gsm ifname "$device" con-name "$nm_con_name" apn "$apn"
fi

sudo nmcli con mod "$nm_con_name" ipv4.method auto   || true
sudo nmcli con mod "$nm_con_name" ipv6.method ignore || true

if [[ "$CONNECTIVITY_MODE" == "always" ]]; then
  sudo nmcli con mod "$nm_con_name" connection.autoconnect yes
  echo "Autoconnect enabled (CONNECTIVITY_MODE=always)."
else
  sudo nmcli con mod "$nm_con_name" connection.autoconnect no
  echo "Autoconnect disabled (CONNECTIVITY_MODE=$CONNECTIVITY_MODE)."
fi

# ----------------------- tc limits (optional) -----------------------
clear_tc_limits() {
  local dev="$1"
  sudo tc qdisc del dev "$dev" root 2>/dev/null || true
  sudo tc qdisc del dev "$dev" ingress 2>/dev/null || true
}

apply_tc_limits() {
  local dev="$1" up_kbit="${2:-}" down_kbit="${3:-}"

  if [[ -n "${up_kbit}" ]]; then
    echo "Applying egress cap ${up_kbit} kbit on ${dev}..."
    sudo tc qdisc del dev "$dev" root 2>/dev/null || true
    sudo tc qdisc add dev "$dev" root tbf rate "${up_kbit}kbit" burst 32kbit latency 400ms
  fi

  if [[ -n "${down_kbit}" ]]; then
    echo "Applying ingress cap ${down_kbit} kbit on ${dev}..."
    sudo tc qdisc del dev "$dev" handle ffff: ingress 2>/dev/null || true
    sudo tc qdisc add dev "$dev" handle ffff: ingress
    sudo tc filter add dev "$dev" parent ffff: protocol all u32 \
      match u32 0 0 police rate "${down_kbit}kbit" burst 32k drop flowid :1
  fi
}

# Policy → default limits (modem: conservative)
if [[ -z "${limit_up_kbit:-}" && -z "${limit_down_kbit:-}" ]]; then
  if [[ "$BANDWIDTH_POLICY" == "restricted" ]]; then
    limit_up_kbit="32"
    limit_down_kbit="256"
    echo "BANDWIDTH_POLICY=restricted → defaults: up=${limit_up_kbit} kbit, down=${limit_down_kbit} kbit"
  else
    echo "BANDWIDTH_POLICY=${BANDWIDTH_POLICY} → clearing any existing tc caps on ${data_iface}"
    clear_tc_limits "$data_iface"
  fi
else
  echo "CLI limits provided → overriding policy (up='${limit_up_kbit:-}', down='${limit_down_kbit:-}')."
fi

if [[ -n "${limit_up_kbit:-}" || -n "${limit_down_kbit:-}" ]]; then
  apply_tc_limits "$data_iface" "${limit_up_kbit:-}" "${limit_down_kbit:-}"
fi

# ----------------------- 1NCE: persist WG MTU=1120 and reload -----------------------
if [[ "${service,,}" == "1nce" ]]; then
  if sudo test -f "$WG_CONF"; then
    if sudo grep -q '^[[:space:]]*MTU[[:space:]]*=' "$WG_CONF"; then
      sudo sed -i -E "s/^[[:space:]]*MTU[[:space:]]*=.*/MTU = 1120/" "$WG_CONF"
    else
      # insert MTU line once, right after the first [Interface] header
      sudo sed -i '/^\[Interface\]/a MTU = 1120' "$WG_CONF"
    fi
    # Reload using the sanitized interface name
    sudo wg-quick down "$WG_IFACE" || true
    sudo wg-quick up "$WG_IFACE"
    echo "Set WireGuard MTU=1120 in ${WG_CONF} and reloaded (${WG_IFACE}) for 1NCE."
  else
    echo "NOTE: ${WG_CONF} not found; MTU persistence skipped." >&2
  fi
fi

# ----------------------- vnstat registration -----------------------
if command -v vnstat >/dev/null 2>&1; then
  if ip link show "$data_iface" >/dev/null 2>&1; then
    if ! vnstat -i "$data_iface" --oneline >/dev/null 2>&1; then
      if vnstat --help 2>/dev/null | grep -q -- '--create'; then
        echo "Creating vnStat database for $data_iface..."
        sudo vnstat --create -i "$data_iface"
      else
        echo "Adding vnStat interface $data_iface (legacy vnStat 1.x)..."
        sudo vnstat --add -i "$data_iface"
      fi
    fi
    if command -v systemctl >/dev/null 2>&1; then
      sudo systemctl enable --now vnstat >/dev/null 2>&1 || true
    fi
  else
    echo "WARNING: interface $data_iface not present yet; skipping vnStat registration." >&2
  fi
else
  echo "WARNING: vnstat not installed; cannot track usage on $data_iface." >&2
fi

# ----------------------- start now? -----------------------
if [[ "${start_now}" == "true" ]]; then
  echo "Bringing up modem connection '$nm_con_name' via '$device'..."
  if ! sudo nmcli -w 45 con up "$nm_con_name" ifname "$device"; then
    echo "WARNING: Failed to start modem connection '$nm_con_name' (ifname=$device)." >&2
  fi
fi

echo "Done."
echo "Manage the modem with:"
echo "  sudo nmcli con up   $nm_con_name"
echo "  sudo nmcli con down $nm_con_name"
