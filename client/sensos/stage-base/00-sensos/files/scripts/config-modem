#!/bin/bash
set -e

script_name=$(basename "$0")
config_dir="/sensos/etc"
config_file="$config_dir/sensos_modem.conf"

source /sensos/lib/load-defaults.sh
source /sensos/lib/parse-switches.sh

declare -A default_vars
load_defaults "$script_name" default_vars

get_default() {
    local varname="$1"
    local fallback="$2"
    echo "${default_vars[$varname]:-$fallback}"
}

register_option --service service "Modem service name (required, e.g. 1nce)" "$(get_default service)"
register_option --modem-iface modem_iface "Modem network interface" "$(get_default modem_iface wwan0)"
register_option --modem-internal-name modem_internal_name "Internal modem name" "$(get_default modem_internal_name cdc-wdm0)"
register_option --enable-service enable_service "Enable sensos-modem.service" "$(get_default enable_service true)"
register_option --start-service start_service "Start sensos-modem.service" "$(get_default start_service false)"

# Parse CLI
parse_switches "$script_name" "$@"

# Validate required argument
if [[ -z "$service" ]]; then
    echo "ERROR: --service must be specified."
    exit 1
fi

# Map service to APN
case "$service" in
1nce) apn="iot.1nce.net" ;;
*)
    echo "ERROR: Unsupported service '$service'"
    exit 1
    ;;
esac

# Ensure output directory exists
mkdir -p "$config_dir"

# Write config file
cat >"$config_file" <<EOF
SERVICE=$service
MODEM_IFACE=$modem_iface
MODEM_INTERNAL_NAME=$modem_internal_name
APN=$apn
EOF

echo "Modem configuration saved to $config_file"

# Manage systemd service
echo "Reloading systemd..."
sudo systemctl daemon-reload

if [[ "$enable_service" == "true" ]]; then
    echo "Enabling sensos-modem.service..."
    sudo systemctl enable sensos-modem.service
fi

if [[ "$start_service" == "true" ]]; then
    echo "Starting sensos-modem.service..."
    sudo systemctl restart sensos-modem.service
fi
