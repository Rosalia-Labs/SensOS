#!/bin/bash

CONFIG_DIR="$HOME/etc"
CONFIG_FILE="$CONFIG_DIR/wifi_access_point.conf"
LOG_DIR="$HOME/log"
ENABLE_SERVICE="true" # Default: Enable & start service
INTERFACE=""

# Check if SENSOS_USER is set and warn if it differs from the current user
if [[ -n "$SENSOS_USER" && "$USER" != "$SENSOS_USER" ]]; then
    echo "WARNING: Current user ($USER) does not match SENSOS_USER ($SENSOS_USER). Configuration may not work."
fi

# Ensure necessary directories exist
mkdir -p "$CONFIG_DIR"
mkdir -p "$LOG_DIR"

# Default values
SSID=""
PASSWORD="" # WPA2 requires at least 8 characters
BAND=""
CHANNEL=""
COUNTRY_CODE="" # Only set if explicitly provided
LOW_TXPOWER="false"
POWER_SAVE="false"
LIMIT_WIDTH="false"
BEACON_INTERVAL="false"

# Function to display usage
usage() {
    echo "Usage: $0 --ssid SSID --password PASSWORD [options]"
    echo ""
    echo "Required options:"
    echo "  --ssid SSID            Set the WiFi SSID (network name)"
    echo "  --password PASSWORD    Set the WiFi password (8-63 characters)"
    echo ""
    echo "Optional network settings:"
    echo "  --interface INTERFACE  Set WiFi interface (default: auto-detect)"
    echo "  --band BAND            Set WiFi band (bg for 2.4GHz, a for 5GHz, default: auto)"
    echo "  --channel CHANNEL      Set WiFi channel (default: auto)"
    echo "  --country CODE         Set WiFi country code (only if specified, otherwise leave unchanged)"
    echo ""
    echo "Optional power-saving settings:"
    echo "  --low-txpower          Reduce transmit power to 5 dBm (saves power, reduces range)"
    echo "  --power-save           Enable WiFi power management (WiFi module sleeps when idle)"
    echo "  --limit-width          Set channel width to 20MHz (reduces power usage)"
    echo "  --beacon-interval      Increase beacon interval to 300ms (reduces broadcast frequency)"
    echo ""
    echo "Service options:"
    echo "  --no-enable            Do not enable or start the service (default: enabled)"
    exit 1
}

# Parse arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
    --ssid)
        SSID="$2"
        shift
        ;;
    --password)
        PASSWORD="$2"
        shift
        ;;
    --interface)
        INTERFACE="$2"
        shift
        ;;
    --band)
        BAND="$2"
        shift
        ;;
    --channel)
        CHANNEL="$2"
        shift
        ;;
    --country)
        COUNTRY_CODE="$2"
        shift
        ;;
    --low-txpower) LOW_TXPOWER="true" ;;
    --power-save) POWER_SAVE="true" ;;
    --limit-width) LIMIT_WIDTH="true" ;;
    --beacon-interval) BEACON_INTERVAL="true" ;;
    --no-enable) ENABLE_SERVICE="false" ;;
    --help) usage ;;
    *)
        echo "Unknown option: $1"
        usage
        ;;
    esac
    shift
done

# **Enforce required arguments**
if [[ -z "$SSID" || -z "$PASSWORD" ]]; then
    echo "ERROR: Both --ssid and --password are required."
    usage
fi

# Validate WPA2 password length
if [[ ${#PASSWORD} -lt 8 || ${#PASSWORD} -gt 63 ]]; then
    echo "ERROR: WPA2 password must be between 8 and 63 characters."
    exit 1
fi

# Save configuration
{
    echo "[WiFi]"
    echo "ssid = $SSID"
    echo "password = $PASSWORD"
    if [[ -n "$INTERFACE" ]]; then
        echo "interface = $INTERFACE"
    fi
    echo "band = $BAND"
    echo "channel = $CHANNEL"
    if [[ -n "$COUNTRY_CODE" ]]; then
        echo "country = $COUNTRY_CODE"
    fi

    echo ""
    echo "[PowerSaving]"
    echo "low_txpower = $LOW_TXPOWER"
    echo "power_save = $POWER_SAVE"
    echo "limit_width = $LIMIT_WIDTH"
    echo "beacon_interval = $BEACON_INTERVAL"
} >"$CONFIG_FILE"

echo "WiFi Access Point configuration saved to $CONFIG_FILE."

# Enable and start the access point service unless --no-enable was used
if [[ "$ENABLE_SERVICE" == "true" ]]; then
    echo "Enabling and starting WiFi Access Point service..."
    sudo systemctl daemon-reload
    sudo systemctl enable wifi-access-point.service
    sudo systemctl restart wifi-access-point.service
    echo "WiFi Access Point service enabled and started."
    sudo systemctl enable ssh
    sudo systemctl start ssh
    echo "Secure shell service enabled and started."
else
    echo "WiFi Access Point service NOT enabled (per user request)."
fi
