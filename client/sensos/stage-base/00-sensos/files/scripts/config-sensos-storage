#!/bin/bash -e
#
# setup-sensos-data.sh
#
# Mounts external storage to /sensos/data, with safeguards.
#

DATA_MOUNT="/sensos/data"
MAKE_FS=false
FS_TYPE_ARG="ext4"
PERMANENT=false
DRY_RUN=false
DEVICE=""
DEVICE_HINT=""

script_name=$(basename "$0")

# Load from defaults.conf
if [[ -f /sensos/lib/load-defaults.sh ]]; then
    source /sensos/lib/load-defaults.sh
    declare -A default_vars
    load_defaults "$script_name" default_vars
    DEVICE_HINT="${default_vars[device_hint]:-}"
fi

usage() {
    cat <<EOF
Usage: $0 [options]

Options:
  --device <path>       Specify device manually (e.g., /dev/sda1)
  --make-fs             Create a new filesystem if none is found (requires confirmation)
  --fs-type <type>      Filesystem type to create if needed (default: ext4)
  --permanent           Add mount to /etc/fstab for persistence across reboot
  --dry-run             Print actions instead of executing them
  --help                Show this help message
EOF
    exit 0
}

# Parse command-line options
while [[ $# -gt 0 ]]; do
    case "$1" in
    --device)
        DEVICE="$2"
        shift 2
        ;;
    --make-fs)
        MAKE_FS=true
        shift
        ;;
    --fs-type)
        FS_TYPE_ARG="$2"
        shift 2
        ;;
    --permanent)
        PERMANENT=true
        shift
        ;;
    --dry-run)
        DRY_RUN=true
        shift
        ;;
    --help)
        usage
        ;;
    *)
        echo "Unknown option: $1" >&2
        usage
        ;;
    esac
done

mkdir -p "$DATA_MOUNT"

# ❗ Check if /sensos/data has existing data
if mountpoint -q "$DATA_MOUNT"; then
    echo "$DATA_MOUNT is already mounted."
    exit 0
elif [[ -n "$(ls -A "$DATA_MOUNT" 2>/dev/null)" ]]; then
    echo "⚠️  Warning: $DATA_MOUNT is not empty. It may contain important data."
    echo "You can back it up before proceeding."
    read -p "Continue and possibly hide existing contents under mount? [y/N]: " confirm
    [[ "$confirm" =~ ^[Yy]$ ]] || {
        echo "Aborting."
        exit 1
    }
fi

# 📦 Select device
if [[ -z "$DEVICE" ]]; then
    if [[ -n "$DEVICE_HINT" && -b "$DEVICE_HINT" ]]; then
        echo "Using device hint from config: $DEVICE_HINT"
        DEVICE="$DEVICE_HINT"
    else
        echo "Looking for unmounted external partitions..."
        DEVICE=$(lsblk -nrpo NAME,TYPE,MOUNTPOINT | awk '$2=="part" && $3=="" {print $1}' | grep -v '^/dev/loop' | grep -v '/dev/mmcblk0p' | head -n 1)
    fi
fi

if [[ -z "$DEVICE" || ! -b "$DEVICE" ]]; then
    echo "❌ No suitable external device found."
    exit 1
fi

echo "Selected device: $DEVICE"

# 🔍 Check filesystem type
FS_TYPE=$(blkid -o value -s TYPE "$DEVICE" || true)
if [[ -z "$FS_TYPE" ]]; then
    echo "No filesystem detected on $DEVICE."

    echo "Checking for non-zero bytes..."
    if hexdump -n 512 "$DEVICE" | grep -qv ' 00 '; then
        echo "⚠️  Detected non-zero bytes — this device may contain data or a non-standard format."
        read -p "Are you sure you want to create a new $FS_TYPE_ARG filesystem on $DEVICE? [y/N]: " confirm
        [[ "$confirm" =~ ^[Yy]$ ]] || {
            echo "Aborting to avoid data loss."
            exit 1
        }
    fi

    if [[ "$MAKE_FS" == true ]]; then
        if [[ "$DRY_RUN" == true ]]; then
            echo "[dry-run] mkfs -t $FS_TYPE_ARG $DEVICE"
        else
            echo "Creating filesystem..."
            mkfs -t "$FS_TYPE_ARG" "$DEVICE"
        fi
        FS_TYPE="$FS_TYPE_ARG"
        echo "✅ Filesystem ready."
    else
        echo "❌ No filesystem found and --make-fs not specified."
        exit 1
    fi
else
    echo "Detected filesystem: $FS_TYPE"
fi

# 📂 Mount the device
if [[ "$DRY_RUN" == true ]]; then
    echo "[dry-run] mount $DEVICE $DATA_MOUNT"
else
    echo "Mounting $DEVICE as $FS_TYPE at $DATA_MOUNT..."
    mount "$DEVICE" "$DATA_MOUNT"
    echo "✅ Mount complete: $DEVICE → $DATA_MOUNT"
fi

# 📌 Add to fstab if requested
if [[ "$PERMANENT" == true ]]; then
    echo "Adding permanent mount entry to /etc/fstab..."

    UUID=$(blkid -s UUID -o value "$DEVICE")
    if [[ -z "$UUID" ]]; then
        echo "❌ Could not determine UUID for $DEVICE"
        exit 1
    fi

    FSTAB_LINE="UUID=$UUID $DATA_MOUNT $FS_TYPE defaults 0 2"

    if grep -q "$DATA_MOUNT" /etc/fstab; then
        echo "⚠️  /etc/fstab already has an entry for $DATA_MOUNT. Not modifying."
    else
        if [[ "$DRY_RUN" == true ]]; then
            echo "[dry-run] echo '$FSTAB_LINE' >> /etc/fstab"
        else
            echo "$FSTAB_LINE" | sudo tee -a /etc/fstab >/dev/null
            echo "✅ Added to /etc/fstab"
        fi
    fi
fi
