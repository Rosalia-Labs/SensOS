#!/usr/bin/env python3
import os
import sys
import json
import socket
import psutil
import subprocess
import base64
import requests

sys.path.insert(0, "/sensos/lib")
from utils import *

DEFAULT_PORT = "8765"
NETWORK_CONF = "/sensos/etc/network.conf"

ARG_DEFS = [
    (
        ["--config-server"],
        {"help": "Configuration server hostname or IP", "dest": "config_server"},
    ),
    (
        ["--port"],
        {"help": "Server port", "dest": "port"},
    ),
]


def generate_hardware_profile():
    def safe(cmd):
        try:
            output = run_command(cmd)
            if output is None:
                # Typically when run_command() failed, e.g. command not found
                if "vcgencmd" in cmd:
                    # Only warn once
                    if not hasattr(safe, "vcgencmd_warned"):
                        print(
                            "⚠️ Warning: vcgencmd is not installed. Skipping firmware info.",
                            file=sys.stderr,
                        )
                        safe.vcgencmd_warned = True
                return None
            return output
        except Exception as e:
            # Only warn once for vcgencmd
            if "vcgencmd" in cmd and not hasattr(safe, "vcgencmd_warned"):
                print(
                    "⚠️ Warning: vcgencmd is not installed. Skipping firmware info.",
                    file=sys.stderr,
                )
                safe.vcgencmd_warned = True
            return None

    try:
        lsblk_output = safe("lsblk -o NAME,SIZE,TYPE,MOUNTPOINT -J")
        disks = json.loads(lsblk_output) if lsblk_output else None
    except Exception as e:
        print(f"⚠️ Warning: failed to parse lsblk output as JSON: {e}", file=sys.stderr)
        disks = None

    return remove_nulls(
        {
            "hostname": socket.gethostname(),
            "model": (safe("cat /proc/device-tree/model") or "").strip(),
            "kernel_version": (safe("uname -a") or "").strip(),
            "cpu": {
                "model": (
                    safe("grep 'Model' /proc/cpuinfo | awk -F': ' '{print $2}'") or ""
                ).strip(),
                "revision": (
                    safe("grep 'Revision' /proc/cpuinfo | awk -F': ' '{print $2}'")
                    or ""
                ).strip(),
                "serial": (
                    safe("grep 'Serial' /proc/cpuinfo | awk -F': ' '{print $2}'") or ""
                ).strip(),
            },
            "firmware": {
                "bootloader": (safe("vcgencmd bootloader_version") or "").strip(),
                "firmware": (safe("vcgencmd version") or "").strip(),
            },
            "memory": {
                "total": psutil.virtual_memory().total,
                "available": psutil.virtual_memory().available,
            },
            "disks": disks,
            "usb_devices": (safe("lsusb") or "").strip(),
            "network_interfaces": {
                iface: [addr.address for addr in addrs if addr.family == socket.AF_INET]
                for iface, addrs in psutil.net_if_addrs().items()
            },
        }
    )


def get_server_info(args):
    # CLI overrides always win.
    if args.config_server and args.port:
        return args.config_server, str(args.port)
    # If only one CLI override is present, treat as incomplete, ignore and fall back.
    # Try to read from network.conf
    conf = read_kv_config(NETWORK_CONF)
    server_ip = conf.get("SERVER_WG_IP")
    port = conf.get("SERVER_PORT", DEFAULT_PORT)
    if not server_ip:
        print(
            "❌ Could not determine configuration server. "
            "Provide --config-server or ensure /sensos/etc/network.conf has SERVER_WG_IP.",
            file=sys.stderr,
        )
        return None, None
    return server_ip, str(port)


def upload_hardware_profile(server_ip, port, api_password):
    profile = generate_hardware_profile()
    wg_ip = get_client_wg_ip()
    if not wg_ip:
        print("❌ CLIENT_WG_IP not found in network.conf. Aborting.", file=sys.stderr)
        return
    profile["wg_ip"] = wg_ip

    headers = {
        "Authorization": f"Basic {get_basic_auth(api_password)}",
        "Content-Type": "application/json",
    }
    url = f"http://{server_ip}:{port}/upload-hardware-profile"
    try:
        response = requests.post(url, headers=headers, json=profile, timeout=10)
        if response.ok:
            print("✅ Hardware profile uploaded successfully.")
        else:
            print(f"❌ Upload failed: {response.status_code} {response.text}")
    except Exception as e:
        print(f"❌ Exception during upload: {e}")


def main():
    setup_logging()
    args = parse_args_with_defaults(ARG_DEFS, ["global", "upload_hardware_profile"])
    server_ip, port = get_server_info(args)
    if not server_ip or not port:
        return

    api_password = get_api_password(server_ip, port)
    if not api_password:
        print("❌ No valid API password found. Exiting.", file=sys.stderr)
        return

    upload_hardware_profile(server_ip, port, api_password)


if __name__ == "__main__":
    main()
