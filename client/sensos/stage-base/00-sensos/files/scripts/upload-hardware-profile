#!/usr/bin/env python3
import os
import sys
import json
import socket
import psutil
import subprocess
import base64
import requests

sys.path.insert(0, "/sensos/lib")
from utils import *

API_PASSWORD_FILE = "/sensos/.sensos_api_password"
DEFAULT_PORT = "8000"

ARG_DEFS = [
    (
        ["--config-server"],
        {"help": "Configuration server hostname or IP", "dest": "config_server"},
    ),
    (["--port"], {"help": "Server port", "dest": "port"}),
]


def generate_hardware_profile():
    def safe(cmd):
        try:
            return run_command(cmd)
        except Exception as e:
            print(f"⚠️ Warning: failed to run '{cmd}': {e}", file=sys.stderr)
            return None

    try:
        lsblk_output = safe("lsblk -o NAME,SIZE,TYPE,MOUNTPOINT -J")
        disks = json.loads(lsblk_output) if lsblk_output else None
    except Exception as e:
        print(f"⚠️ Warning: failed to parse lsblk output as JSON: {e}", file=sys.stderr)
        disks = None

    return remove_nulls(
        {
            "hostname": socket.gethostname(),
            "model": safe("cat /proc/device-tree/model"),
            "kernel_version": safe("uname -a"),
            "cpu": {
                "model": safe("grep 'Model' /proc/cpuinfo | awk -F': ' '{print $2}'"),
                "revision": safe(
                    "grep 'Revision' /proc/cpuinfo | awk -F': ' '{print $2}'"
                ),
                "serial": safe("grep 'Serial' /proc/cpuinfo | awk -F': ' '{print $2}'"),
            },
            "firmware": {
                "bootloader": safe("vcgencmd bootloader_version"),
                "firmware": safe("vcgencmd version"),
            },
            "memory": {
                "total": psutil.virtual_memory().total,
                "available": psutil.virtual_memory().available,
            },
            "disks": disks,
            "usb_devices": safe("lsusb"),
            "network_interfaces": {
                iface: [addr.address for addr in addrs if addr.family == socket.AF_INET]
                for iface, addrs in psutil.net_if_addrs().items()
            },
        }
    )


def upload_hardware_profile(server_ip, port, api_password):
    profile = generate_hardware_profile()
    wg_ip = get_client_wg_ip()
    if not wg_ip:
        print("❌ CLIENT_WG_IP not found in network.conf. Aborting.", file=sys.stderr)
        return
    profile["wg_ip"] = wg_ip

    headers = {
        "Authorization": f"Basic {get_basic_auth(api_password)}",
        "Content-Type": "application/json",
    }
    url = f"http://{server_ip}:{port}/upload-hardware-profile"
    try:
        response = requests.post(url, headers=headers, json=profile, timeout=10)
        if response.ok:
            print("✅ Hardware profile uploaded successfully.")
        else:
            print(f"❌ Upload failed: {response.status_code} {response.text}")
    except Exception as e:
        print(f"❌ Exception during upload: {e}")


def main():
    setup_logging()

    args = parse_args_with_defaults(ARG_DEFS, ["global", "upload_hardware_profile"])

    server_ip = args.config_server
    port = args.port or DEFAULT_PORT

    if not server_ip:
        server_ip, port = detect_wireguard_api()
        if server_ip:
            print(f"ℹ️ Detected WireGuard API at {server_ip}:{port}")
        else:
            print("❌ Could not detect configuration server.", file=sys.stderr)
            return

    api_password = get_api_password(server_ip, port)
    if not api_password:
        print("❌ No valid API password found. Exiting.", file=sys.stderr)
        return

    upload_hardware_profile(server_ip, port, api_password)


if __name__ == "__main__":
    main()
