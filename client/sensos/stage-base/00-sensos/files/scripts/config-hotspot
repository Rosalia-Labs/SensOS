#!/bin/bash
# SPDX-License-Identifier: MIT
# Copyright (c) 2025 Rosalia Labs LLC

set -euo pipefail

script_name=$(basename "$0")
log_dir="/sensos/log"
LOG_FILE="$log_dir/access_point.log"

mkdir -p "$log_dir"

source /sensos/lib/load-defaults.sh
source /sensos/lib/parse-switches.sh

declare -A default_vars
load_defaults "$script_name" default_vars

get_default() { local v="$1" f="${2:-}"; echo "${default_vars[$v]:-$f}"; }

network_conf="/sensos/etc/network.conf"
if [[ ! -f "$network_conf" ]]; then
  echo "ERROR: $network_conf does not exist." >&2
  exit 1
fi

NETWORK_NAME=""
CLIENT_WG_IP=""
while IFS='=' read -r key value; do
  key="${key// /}"; value="${value// /}"
  case "$key" in
    NETWORK_NAME) NETWORK_NAME="$value" ;;
    CLIENT_WG_IP) CLIENT_WG_IP="$value" ;;
  esac
done <"$network_conf"

if [[ -z "$NETWORK_NAME" || -z "$CLIENT_WG_IP" ]]; then
  echo "ERROR: NETWORK_NAME or CLIENT_WG_IP not set in $network_conf" >&2
  exit 1
fi

IFS='.' read -r _ _ oct3 oct4 <<<"$CLIENT_WG_IP"
default_ssid="${NETWORK_NAME}-${oct3}-${oct4}"

# ---- CLI options ----
register_option --ssid ssid "WiFi SSID" "$(get_default ssid "$default_ssid")"
register_option --password password "WiFi password (8–63 chars)" "$(get_default password)"
register_option --power-save power_save "Enable WiFi power management" "$(get_default power_save false)"
register_option --interface interface "Wireless interface to use" "$(get_default interface wlan0)"
register_option --channel channel "2.4 GHz channel (1/6/11 or empty for auto)" "$(get_default channel 6)"
parse_switches "$script_name" "$@"

ssid="${ssid:-$default_ssid}"
if [[ -z "${password:-}" ]]; then
  echo "ERROR: --password is required (SSID defaults to '$default_ssid' unless provided)." >&2
  exit 1
fi
if [[ ${#password} -lt 8 || ${#password} -gt 63 ]]; then
  echo "ERROR: WPA2 password must be between 8 and 63 characters." >&2
  exit 1
fi

# ---- Apply AP via NetworkManager (no service) ----
exec 3>>"$LOG_FILE"
echo "[$(date -Is)] Applying AP config…" >&3

IFACE="${interface:-wlan0}"

# Unblock Wi-Fi & turn it on
rfkill list wifi 2>/dev/null | grep -q "Soft blocked: yes" && sudo rfkill unblock wifi || true
sudo nmcli radio wifi on || true

# If IFACE is connected but not AP, disconnect so we can switch roles
current_con="$(nmcli -t -f GENERAL.CONNECTION device show "$IFACE" | cut -d: -f2 || true)"
if [[ -n "$current_con" ]]; then
  mode="$(nmcli -t -f 802-11-wireless.mode connection show "$current_con" 2>/dev/null | cut -d: -f2 || true)"
  if [[ "$mode" == "ap" ]]; then
    echo "[$(date -Is)] $IFACE is already running AP '$current_con'; will adopt/update it." >&3
  else
    sudo nmcli dev disconnect "$IFACE" || true
  fi
fi

# ---- Adopt any existing AP on this iface; otherwise create sensosap ----
AP_CON=""

# Prefer an active AP on this iface (e.g., boot Hotspot)
if [[ -n "$current_con" ]]; then
  mode="$(nmcli -t -f 802-11-wireless.mode connection show "$current_con" 2>/dev/null | cut -d: -f2 || true)"
  if [[ "$mode" == "ap" ]]; then
    AP_CON="$current_con"
    echo "[$(date -Is)] Found active AP '$AP_CON' on $IFACE; adopting it." >&3
  fi
fi

# If none active, reuse any saved AP profile
if [[ -z "$AP_CON" ]]; then
  saved_ap="$(nmcli -t -f NAME,TYPE,802-11-wireless.mode connection show 2>/dev/null \
              | awk -F: '$2=="wifi" && $3=="ap"{print $1; exit}')"
  if [[ -n "$saved_ap" ]]; then
    AP_CON="$saved_ap"
    echo "[$(date -Is)] Reusing saved AP '$AP_CON'." >&3
  fi
fi

# If still none, create a fresh one
if [[ -z "$AP_CON" ]]; then
  AP_CON="sensosap"
  echo "[$(date -Is)] Creating new AP '$AP_CON'…" >&3
  sudo nmcli connection add type wifi ifname "$IFACE" con-name "$AP_CON" ssid "$ssid"
fi

# If adopted connection isn't named sensosap, rename it in-place
if [[ "$AP_CON" != "sensosap" ]]; then
  echo "[$(date -Is)] Renaming AP '$AP_CON' -> 'sensosap'." >&3
  sudo nmcli connection modify "$AP_CON" connection.id "sensosap"
  AP_CON="sensosap"
fi

# Force AP mode + WPA2-PSK + IPv4 sharing; bind to the intended iface; autoconnect on boot
sudo nmcli connection modify "$AP_CON" \
  connection.interface-name "$IFACE" \
  802-11-wireless.mode ap \
  802-11-wireless.ssid "$ssid" \
  802-11-wireless.band bg \
  802-11-wireless.hidden no \
  wifi-sec.key-mgmt wpa-psk \
  wifi-sec.proto rsn \
  wifi-sec.group ccmp \
  wifi-sec.pairwise ccmp \
  wifi-sec.psk "$password" \
  ipv4.method shared \
  connection.autoconnect yes \
  connection.autoconnect-priority 100

# Optional fixed channel (or clear to auto)
if [[ -n "${channel:-}" && "${channel}" =~ ^[0-9]+$ ]]; then
  sudo nmcli connection modify "$AP_CON" 802-11-wireless.channel "$channel"
else
  sudo nmcli connection modify "$AP_CON" 802-11-wireless.channel "" || true
fi

# Bring it up (idempotent; will reapply if already active)
if ! sudo nmcli connection up "$AP_CON"; then
  echo "[$(date -Is)] ERROR: Failed to bring up AP '$AP_CON'." >&3
  exit 1
fi

# Power-save toggle (best-effort)
if [[ -n "${power_save:-}" ]]; then
  if [[ "${power_save,,}" == "true" ]]; then
    sudo iw dev "$IFACE" set power_save on || true
  else
    sudo iw dev "$IFACE" set power_save off || true
  fi
fi

# Helpful logging
iw dev "$IFACE" info >&3 || true
nmcli -f GENERAL.CONNECTION,IP4.ADDRESS device show "$IFACE" >&3 || true
nmcli -f GENERAL,IP4,802-11-wireless connection show "$AP_CON" >&3 || true

# After successful bring-up of the AP
if sudo nmcli -t -f NAME connection show --active | grep -qx "sensosap"; then
  echo "[$(date -Is)] ✅ AP '$AP_CON' active; disabling boot AP service if present." >&3
  sudo systemctl disable --now auto-hotspot.service 2>/dev/null || true
fi

echo "[$(date -Is)] ✅ AP '$AP_CON' active on $IFACE (autoconnect enabled)" >&3
exec 3>&-
