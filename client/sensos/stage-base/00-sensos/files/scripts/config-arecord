#!/bin/bash
# config-arecord.sh: Write arecord configuration to /sensos/etc

set -e

script_name=$(basename "$0")

Usage() {
    cat <<EOF
Usage: $0 [options]

Optional (interactive if omitted):
  --device DEVICE         Recording device string (e.g., plughw:1,0)
  --format FORMAT         Recording format (e.g., S16_LE)
  --channels CHANNELS     Channel count (e.g., 2)
  --rate RATE             Sample rate in Hz (default: 48000)
  --max-time SECONDS      Max duration per file (default: 900)
  --base-dir DIR          Base directory for sound files (default: /sensos/data/audio_recordings/)
  --help                  Show this help message
EOF
}

# Built-in defaults
device=""
format=""
channels=""
rate="48000"
max_time="900"
base_dir="/sensos/data/audio_recordings/"

# Parse command-line arguments
TEMP=$(getopt -o "" \
    --long device:,format:,channels:,rate:,max-time:,base-dir:,help \
    -n 'config-arecord.sh' -- "$@")
if [ $? != 0 ]; then
    Usage
    exit 1
fi
eval set -- "$TEMP"

while true; do
    case "$1" in
    --device)
        device="$2"
        shift 2
        ;;
    --format)
        format="$2"
        shift 2
        ;;
    --channels)
        channels="$2"
        shift 2
        ;;
    --rate)
        rate="$2"
        shift 2
        ;;
    --max-time)
        max_time="$2"
        shift 2
        ;;
    --base-dir)
        base_dir="$2"
        shift 2
        ;;
    --help)
        Usage
        exit 0
        ;;
    --)
        shift
        break
        ;;
    *)
        echo "Unknown option: $1"
        Usage
        exit 1
        ;;
    esac
done

# Load overrides
if [ -f /sensos/lib/load-defaults.sh ]; then
    # shellcheck source=/dev/null
    source /sensos/lib/load-defaults.sh
    apply_defaults /sensos/etc/defaults.conf "$script_name"
fi

# Prompt for device if not specified
if [ -z "$device" ]; then
    echo "Available recording devices:"
    mapfile -t device_list < <(arecord -L | grep -v '^ ' | grep -E '^plughw|^hw')
    for i in "${!device_list[@]}"; do
        echo "[$i] ${device_list[$i]}"
    done
    echo
    read -p "Select device index: " dev_index
    device="${device_list[$dev_index]}"
    echo "Selected device: $device"
fi

# Extract numeric device (e.g., hw:3,0) from card name
if [[ "$device" =~ ^(plug)?hw:([^,]+),([0-9]+) ]]; then
    card_name="${BASH_REMATCH[2]}"
    dev_index="${BASH_REMATCH[3]}"
else
    echo "Unable to parse selected device string: $device"
    exit 1
fi

card_number=$(arecord -l | grep "^card " | grep "$card_name" | awk '{print $2}' | tr -d ':')

if [ -z "$card_number" ]; then
    echo "Unable to map card name '$card_name' to a card number."
    exit 1
fi

hw_numeric="hw:$card_number,$dev_index"
params=$(arecord --dump-hw-params -D "$hw_numeric" 2>/dev/null || true)

if [ -z "$params" ]; then
    echo "WARNING: Unable to query hardware params for '$device'. Proceeding without param introspection."
fi

# Prompt for format
if [ -z "$format" ]; then
    formats=$(echo "$params" | grep "^  FORMAT" | sed 's/^.*:\s*//' | tr ',' '\n')
    mapfile -t format_list < <(echo "$formats")
    echo "Available formats:"
    for i in "${!format_list[@]}"; do
        echo "[$i] ${format_list[$i]}"
    done
    echo
    read -p "Select format index: " fmt_index
    format="${format_list[$fmt_index]}"
    echo "Selected format: $format"
fi

# Prompt for channels
if [ -z "$channels" ]; then
    ch_range=$(echo "$params" | grep "^  CHANNELS" | awk -F'[][]' '{print $2}')
    min_ch=$(echo "$ch_range" | cut -d: -f1)
    max_ch=$(echo "$ch_range" | cut -d: -f2)

    if [ "$min_ch" = "$max_ch" ]; then
        channels="$min_ch"
        echo "Only one channel count available: $channels"
    else
        echo "Available channel counts:"
        ch_options=()
        for ((c = min_ch; c <= max_ch; c++)); do
            ch_options+=("$c")
            echo "[$((c - min_ch))] $c"
        done
        echo
        read -p "Select channel count index: " ch_index
        channels="${ch_options[$ch_index]}"
        echo "Selected channels: $channels"
    fi
fi

# Prompt for sample rate
if [ -z "$rate" ]; then
    read -p "Enter sample rate in Hz (default: 48000): " rate
    rate="${rate:-48000}"
fi

# Prompt for max file duration
if [ -z "$max_time" ]; then
    read -p "Enter max file duration in seconds (default: 900): " max_time
    max_time="${max_time:-900}"
fi

# Prompt for base directory
if [ -z "$base_dir" ]; then
    read -p "Enter base directory for recordings (default: /sensos/data/audio_recordings/): " base_dir
    base_dir="${base_dir:-/sensos/data/audio_recordings/}"
fi

# Write config
config_dir="/sensos/etc"
mkdir -p "$config_dir"
config_file="$config_dir/arecord.conf"

cat >"$config_file" <<EOF
# Auto-generated arecord configuration
DEVICE="$device"
FORMAT="$format"
CHANNELS=$channels
RATE=$rate
MAX_TIME=$max_time
BASE_DIR="$base_dir"
EOF

chmod -R g+w /sensos/data || sudo chmod -R g+w /sensos/data || true

echo "Configuration written to $config_file"

echo "Enabling and starting sensos-arecord.service..."
sudo systemctl daemon-reload
sudo systemctl enable sensos-arecord.service
sudo systemctl start sensos-arecord.service
