#!/bin/bash
set -e

script_name=$(basename "$0")

# Load default overrides
if [[ -f /sensos/lib/load-defaults.sh ]]; then
    source /sensos/lib/load-defaults.sh
    declare -A default_vars
    load_defaults "$script_name" default_vars
fi

# Helper to get value with optional override
get_default() {
    local varname="$1"
    local fallback="$2"
    if [[ -n "${default_vars[$varname]:-}" ]]; then
        echo "${default_vars[$varname]}"
    else
        echo "$fallback"
    fi
}

# Defaults (overridable)
postgres_db=$(get_default postgres_db "postgres")
postgres_user=$(get_default postgres_user "postgres")
postgres_password=$(get_default postgres_password "sensos")
db_host=$(get_default db_host "sensos-client-database")
db_port=$(get_default db_port "5432")
db_data_path=$(get_default db_data_path "sensos-db-data")
audio_directory=$(get_default audio_directory "")
audio_format_code=$(get_default audio_format_code "")
docker_compose_dir=$(get_default docker_compose_dir "/sensos/docker")
arecord_conf=$(get_default arecord_conf "/sensos/etc/arecord.conf")
enable_service=$(get_default enable_service "true")
start_service=$(get_default start_service "true")

usage() {
    cat <<EOF
Usage: $0 [options]

Options:
  --postgres-db <value>       Set database name
  --postgres-user <value>     Set database user
  --postgres-password <value> Set database password
  --db-host <value>           Set database host
  --db-port <value>           Set database port
  --db-data-path <value>      Set Docker volume path
  --audio-directory <value>   Set path for audio files
  --audio-format <value>      Set ALSA audio format code
  --enable-service <true|false>  Enable sensos-docker.service (default: true)
  --start-service <true|false>   Start sensos-docker.service (default: true)
  --help                      Show this help message
EOF
}

# Parse CLI overrides
while [[ "$#" -gt 0 ]]; do
    case "$1" in
    --postgres-db)
        postgres_db="$2"
        shift 2
        ;;
    --postgres-user)
        postgres_user="$2"
        shift 2
        ;;
    --postgres-password)
        postgres_password="$2"
        shift 2
        ;;
    --db-host)
        db_host="$2"
        shift 2
        ;;
    --db-port)
        db_port="$2"
        shift 2
        ;;
    --db-data-path)
        db_data_path="$2"
        shift 2
        ;;
    --audio-directory)
        audio_directory="$2"
        shift 2
        ;;
    --audio-format)
        audio_format_code="$2"
        shift 2
        ;;
    --enable-service)
        enable_service="$2"
        shift 2
        ;;
    --start-service)
        start_service="$2"
        shift 2
        ;;
    --help)
        usage
        exit 0
        ;;
    *)
        echo "Unknown option: $1"
        usage
        exit 1
        ;;
    esac
done

# Load values from arecord.conf if available
if [[ -f "$arecord_conf" ]]; then
    echo "Reading config from $arecord_conf..."
    [[ -z "$audio_directory" ]] && audio_directory=$(grep '^BASE_DIR=' "$arecord_conf" | cut -d= -f2- | tr -d '"')
    [[ -z "$audio_format_code" ]] && audio_format_code=$(grep '^FORMAT=' "$arecord_conf" | cut -d= -f2- | tr -d '"')
fi

# Final fallbacks
audio_directory="${audio_directory:-/sensos/data/audio_recordings}"
audio_format_code="${audio_format_code:-S32_LE}"

# Ensure output directory exists
mkdir -p "$docker_compose_dir"
if [[ ! -w "$docker_compose_dir" ]]; then
    echo "ERROR: Cannot write to $docker_compose_dir"
    exit 1
fi

# Write .env file
env_file="$docker_compose_dir/.env"
cat >"$env_file" <<EOF
POSTGRES_DB=${postgres_db}
POSTGRES_USER=${postgres_user}
POSTGRES_PASSWORD=${postgres_password}
DB_HOST=${db_host}
DB_PORT=${db_port}
DB_DATA_PATH=${db_data_path}
AUDIO_DIRECTORY=${audio_directory}
AUDIO_FORMAT_CODE=${audio_format_code}
EOF

echo ".env written to $env_file:"
cat "$env_file"

# Manage systemd service
echo "Reloading systemd..."
sudo systemctl daemon-reload

if [[ "$enable_service" == "true" ]]; then
    echo "Enabling sensos-docker.service..."
    sudo systemctl enable sensos-docker.service
fi

if [[ "$start_service" == "true" ]]; then
    echo "Starting sensos-docker.service..."
    sudo systemctl start sensos-docker.service
fi
