#!/bin/bash
set -e

# Default values
POSTGRES_DB="postgres"
POSTGRES_USER="postgres"
POSTGRES_PASSWORD="sensos"
DB_HOST="sensos-client-database"
DB_PORT="5432"
DB_DATA_PATH="sensos-db-data"
AUDIO_DIRECTORY=""
AUDIO_FORMAT_CODE=""

# Config file path
ARECORD_CONF="/sensos/etc/arecord.conf"
DOCKER_COMPOSE_DIR="/sensos/docker"

usage() {
    cat <<EOF
Usage: $0 [options]

Options:
  --postgres-db <value>       Set POSTGRES_DB (default: postgres)
  --postgres-user <value>     Set POSTGRES_USER (default: postgres)
  --postgres-password <value> Set POSTGRES_PASSWORD (default: sensos)
  --db-host <value>           Set DB_HOST (default: sensos-client-database)
  --db-port <value>           Set DB_PORT (default: 5432)
  --db-data-path <value>      Set DB_DATA_PATH (default: sensos-db-data)
  --audio-directory <value>   Set AUDIO_DIRECTORY (from arecord.conf or default)
  --audio-format <value>      Set AUDIO_FORMAT_CODE (from arecord.conf or default)
  --help                      Show this help message
EOF
}

# Parse command-line options
while [[ "$#" -gt 0 ]]; do
    case "$1" in
    --postgres-db)
        POSTGRES_DB="$2"
        shift 2
        ;;
    --postgres-user)
        POSTGRES_USER="$2"
        shift 2
        ;;
    --postgres-password)
        POSTGRES_PASSWORD="$2"
        shift 2
        ;;
    --db-host)
        DB_HOST="$2"
        shift 2
        ;;
    --db-port)
        DB_PORT="$2"
        shift 2
        ;;
    --db-data-path)
        DB_DATA_PATH="$2"
        shift 2
        ;;
    --audio-directory)
        AUDIO_DIRECTORY="$2"
        shift 2
        ;;
    --audio-format)
        AUDIO_FORMAT_CODE="$2"
        shift 2
        ;;
    --help)
        usage
        exit 0
        ;;
    *)
        echo "Unknown option: $1"
        usage
        exit 1
        ;;
    esac
done

# If arecord.conf exists and values not already provided, extract defaults
if [[ -f "$ARECORD_CONF" ]]; then
    echo "Reading config from $ARECORD_CONF..."
    if [[ -z "$AUDIO_DIRECTORY" ]]; then
        AUDIO_DIRECTORY=$(grep '^BASE_DIR=' "$ARECORD_CONF" | cut -d= -f2- | tr -d '"')
    fi
    if [[ -z "$AUDIO_FORMAT_CODE" ]]; then
        AUDIO_FORMAT_CODE=$(grep '^FORMAT=' "$ARECORD_CONF" | cut -d= -f2- | tr -d '"')
    fi
fi

# Fallback defaults if still unset
AUDIO_DIRECTORY="${AUDIO_DIRECTORY:-/sensos/data/audio_recordings}"
AUDIO_FORMAT_CODE="${AUDIO_FORMAT_CODE:-S32_LE}"

# Ensure the directory exists and is writable
mkdir -p "$DOCKER_COMPOSE_DIR"
if [[ ! -w "$DOCKER_COMPOSE_DIR" ]]; then
    echo "ERROR: Cannot write to $DOCKER_COMPOSE_DIR"
    exit 1
fi

# Write the .env file
cat >"$DOCKER_COMPOSE_DIR/.env" <<EOF
POSTGRES_DB=${POSTGRES_DB}
POSTGRES_USER=${POSTGRES_USER}
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
DB_HOST=${DB_HOST}
DB_PORT=${DB_PORT}
DB_DATA_PATH=${DB_DATA_PATH}
AUDIO_DIRECTORY=${AUDIO_DIRECTORY}
AUDIO_FORMAT_CODE=${AUDIO_FORMAT_CODE}
EOF

echo ".env file written to ${DOCKER_COMPOSE_DIR}/.env with the following content:"
cat "$DOCKER_COMPOSE_DIR/.env"

# Enable and start the service
echo "Enabling and starting sensos-docker.service..."
sudo systemctl daemon-reload
sudo systemctl enable sensos-docker.service
sudo systemctl start sensos-docker.service
echo "Service started. Use 'sudo systemctl status sensos-docker.service' to check status."
