#!/bin/bash
# SPDX-License-Identifier: MIT
# Copyright (c) 2025 Rosalia Labs

# config-wifi
# - Creates/updates a NetworkManager Wi-Fi client profile for the given SSID
# - Sets autoconnect based on CONNECTIVITY_MODE from /sensos/etc/network.conf
# - Optional bandwidth caps via tc (egress/ingress); if BANDWIDTH_POLICY=restricted,
#   apply sane SSH-friendly defaults unless overridden by CLI.
# - Registers interface with vnstat for usage accounting

set -euo pipefail

script_name=$(basename "$0")
network_conf="/sensos/etc/network.conf"

# ----------------------- enforce user / sudo -----------------------
if [[ "$(id -un)" != "sensos-admin" ]]; then
  echo "ERROR: this script must be run as sensos-admin." >&2
  exit 1
fi

# ----------------------- early help (avoid parse-switches under set -u) -----------------------
print_usage() {
  cat <<EOF
Usage: $script_name [options]

Options:
  --ssid [value]             WiFi SSID (required)
  --password [value]         WiFi password (WPA-PSK). Omit for open networks.
  --iface [value]            WiFi interface (default: wlan0)
  --start [true|false]       Immediately bring Wi-Fi online after config (default: false)
  --hidden [true|false]      Mark SSID as hidden (default: false)
  --limit-up-kbit [value]    Egress cap in kbit (optional; overrides policy)
  --limit-down-kbit [value]  Ingress cap in kbit (optional; overrides policy)
  -h, --help                 Show this help and exit
EOF
}

for arg in "$@"; do
  if [[ "$arg" == "--help" || "$arg" == "-h" ]]; then
    print_usage
    exit 0
  fi
done

# ----------------------- deps -----------------------
if ! command -v nmcli >/dev/null 2>&1; then
  echo "ERROR: nmcli not found. Install NetworkManager." >&2
  exit 1
fi

source /sensos/lib/load-defaults.sh
source /sensos/lib/parse-switches.sh

declare -A default_vars
load_defaults "$script_name" default_vars

get_default() {
  local varname="$1"
  local fallback="${2-}"
  echo "${default_vars[$varname]:-$fallback}"
}

# ----------------------- options -----------------------
register_option --ssid ssid "WiFi SSID (required)" "$(get_default ssid)"
register_option --password password "WiFi password (required for WPA-PSK; omit for open)" "$(get_default password)"
register_option --iface iface "WiFi interface" "$(get_default iface wlan0)"
register_option --start start_now "Immediately bring Wi-Fi online after config" "$(get_default start_now false)"
register_option --hidden hidden "Mark SSID as hidden (true/false)" "$(get_default hidden false)"
# Optional bandwidth limits (kbit)
register_option --limit-up-kbit   limit_up_kbit   "Egress cap in kbit (optional)"   "$(get_default limit_up_kbit "")"
register_option --limit-down-kbit limit_down_kbit "Ingress cap in kbit (optional)" "$(get_default limit_down_kbit "")"

# Guard parse-switches from nounset issues inside its help path
set +u
parse_switches "$script_name" "$@"
set -u

# ----------------------- validate required args -----------------------
if [[ -z "${ssid:-}" ]]; then
  echo "ERROR: --ssid must be specified." >&2
  exit 1
fi

# ----------------------- config presence -----------------------
if [[ ! -f "$network_conf" ]]; then
  echo "ERROR: Required config $network_conf is missing." >&2
  exit 1
fi

# shellcheck disable=SC1090
source "$network_conf"

CONNECTIVITY_MODE="${CONNECTIVITY_MODE:-manual}"
BANDWIDTH_POLICY="${BANDWIDTH_POLICY:-open}"

# ----------------------- NM connection name -----------------------
nm_con_name="sensos-wifi-${ssid}"

# ----------------------- create/update Wi-Fi connection -----------------------
if nmcli -t -f NAME con show | grep -qx "$nm_con_name"; then
  echo "Updating Wi-Fi connection '$nm_con_name' on iface '$iface'..."
  sudo nmcli con mod "$nm_con_name" connection.id "$nm_con_name" || true
  sudo nmcli con mod "$nm_con_name" connection.interface-name "$iface" || true
  sudo nmcli con mod "$nm_con_name" 802-11-wireless.ssid "$ssid" || true
  sudo nmcli con mod "$nm_con_name" 802-11-wireless.mode infrastructure || true
  sudo nmcli con mod "$nm_con_name" 802-11-wireless.hidden "$( [[ "${hidden,,}" == "true" ]] && echo yes || echo no )" || true

  if [[ -n "${password:-}" ]]; then
    sudo nmcli con mod "$nm_con_name" 802-11-wireless-security.key-mgmt wpa-psk || true
    sudo nmcli con mod "$nm_con_name" 802-11-wireless-security.psk "$password" || true
  else
    sudo nmcli con mod "$nm_con_name" 802-11-wireless-security.key-mgmt none || true
    # ensure no stale PSK
    sudo nmcli con mod "$nm_con_name" -ipv4.dns-priority >/dev/null 2>&1 || true
  fi
else
  echo "Creating Wi-Fi connection '$nm_con_name' on iface '$iface'..."
  sudo nmcli con add type wifi ifname "$iface" con-name "$nm_con_name" ssid "$ssid"
  sudo nmcli con mod "$nm_con_name" 802-11-wireless.mode infrastructure
  sudo nmcli con mod "$nm_con_name" 802-11-wireless.hidden "$( [[ "${hidden,,}" == "true" ]] && echo yes || echo no )"
  if [[ -n "${password:-}" ]]; then
    sudo nmcli con mod "$nm_con_name" 802-11-wireless-security.key-mgmt wpa-psk
    sudo nmcli con mod "$nm_con_name" 802-11-wireless-security.psk "$password"
  else
    sudo nmcli con mod "$nm_con_name" 802-11-wireless-security.key-mgmt none
  fi
fi

# IPv4/IPv6 methods
sudo nmcli con mod "$nm_con_name" ipv4.method auto   || true
sudo nmcli con mod "$nm_con_name" ipv6.method ignore || true

# Autoconnect policy
if [[ "$CONNECTIVITY_MODE" == "always" ]]; then
  sudo nmcli con mod "$nm_con_name" connection.autoconnect yes
  echo "Autoconnect enabled (CONNECTIVITY_MODE=always)."
else
  sudo nmcli con mod "$nm_con_name" connection.autoconnect no
  echo "Autoconnect disabled (CONNECTIVITY_MODE=$CONNECTIVITY_MODE)."
fi

# ----------------------- tc helpers -----------------------
clear_tc_limits() {
  local dev="$1"
  sudo tc qdisc del dev "$dev" root 2>/dev/null || true
  sudo tc qdisc del dev "$dev" ingress 2>/dev/null || true
}

apply_tc_limits() {
  local dev="$1" up_kbit="${2:-}" down_kbit="${3:-}"

  if [[ -n "${up_kbit}" ]]; then
    echo "Applying egress cap ${up_kbit} kbit on ${dev}..."
    sudo tc qdisc del dev "$dev" root 2>/dev/null || true
    sudo tc qdisc add dev "$dev" root tbf rate "${up_kbit}kbit" burst 32kbit latency 400ms
  fi

  if [[ -n "${down_kbit}" ]]; then
    echo "Applying ingress cap ${down_kbit} kbit on ${dev}..."
    sudo tc qdisc del dev "$dev" handle ffff: ingress 2>/dev/null || true
    sudo tc qdisc add dev "$dev" handle ffff: ingress
    sudo tc filter add dev "$dev" parent ffff: protocol all u32 \
      match u32 0 0 police rate "${down_kbit}kbit" burst 32k drop flowid :1
  fi
}

# ----------------------- policy-driven limits -----------------------
if [[ -z "${limit_up_kbit:-}" && -z "${limit_down_kbit:-}" ]]; then
  if [[ "$BANDWIDTH_POLICY" == "restricted" ]]; then
    limit_up_kbit="32"
    limit_down_kbit="256"
    echo "BANDWIDTH_POLICY=restricted → applying defaults: up=${limit_up_kbit} kbit, down=${limit_down_kbit} kbit"
  else
    echo "BANDWIDTH_POLICY=${BANDWIDTH_POLICY} → clearing any existing traffic caps on ${iface}"
    clear_tc_limits "$iface"
  fi
else
  echo "CLI limits provided → overriding policy (up='${limit_up_kbit:-}', down='${limit_down_kbit:-}')."
fi

if [[ -n "${limit_up_kbit:-}" || -n "${limit_down_kbit:-}" ]]; then
  apply_tc_limits "$iface" "${limit_up_kbit:-}" "${limit_down_kbit:-}"
fi

# ----------------------- vnstat registration -----------------------
if command -v vnstat >/dev/null 2>&1; then
  if ip link show "$iface" >/dev/null 2>&1; then
    if ! vnstat -i "$iface" --oneline >/dev/null 2>&1; then
      if vnstat --help 2>/dev/null | grep -q -- '--create'; then
        echo "Creating vnStat database for $iface..."
        sudo vnstat --create -i "$iface"
      else
        echo "Adding vnStat interface $iface (legacy vnStat 1.x)..."
        sudo vnstat --add -i "$iface"
      fi
    fi
    if command -v systemctl >/dev/null 2>&1; then
      sudo systemctl enable --now vnstat >/dev/null 2>&1 || true
    fi
  else
    echo "WARNING: interface $iface not present yet; skipping vnStat registration." >&2
  fi
else
  echo "WARNING: vnstat not installed; cannot track usage on $iface." >&2
fi

# ----------------------- start now? -----------------------
if [[ "${start_now:-false}" == "true" ]]; then
  echo "Bringing up Wi-Fi connection '$nm_con_name' on '$iface'..."
  if ! sudo nmcli -w 45 con up "$nm_con_name" ifname "$iface"; then
    echo "WARNING: Failed to start Wi-Fi connection '$nm_con_name' (ifname=$iface)." >&2
  fi
fi

echo "Done."
echo "Manage Wi-Fi with:"
echo "  sudo nmcli con up   \"$nm_con_name\""
echo "  sudo nmcli con down \"$nm_con_name\""
